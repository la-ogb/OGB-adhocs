+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+    Program name   :  A0504181.PS 
+    Description    :  CUS - HEALTH INC PICK-UPS SINC 12/1/2002.               
+    Author         :  Stephen J. McDonald
+    Date created   :  04/18/2005
+    APSJM 04/18/2005  Initial version.                                      
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

. ----------------------------
. Required Program Includes
. ----------------------------

              INC       COMMON.CB            ...Common work area
              INC       X_COMMON.CB          ...OGB Common Work Area
              INC       VALID.RL             ...Valid codes
              INC       X_OGBFILE.CB         ...OGB Custom File Handler
              INC       PRT.RL               ...Printer Definition File
              
. ----------------------------
. Program Specific Includes
. ----------------------------
              INC       MEM.RL           ...Member Demographics
              INC       MEME.RL          ...Member Enrollment   

. ----------------------------
. File Declarations
. ----------------------------
HLTN_FD    FILE     VAR=8,TEXT
HLTN_NME   INIT    "/w/hltn.txt"    
HLTN_LIST  LIST
HLTN_ID1   DIM     8
           LISTEND 
.
MEME_DTE_FD     FILE    VAR=21,TEXT
MEME_DTE_NME    INIT    "/w/a0504181.dte"
MEME_DTE_LIST   LIST
MEME_FROM_DTE   DIM     8
MEME_THRU_DTE   DIM     8
MEME_PRODUCT    DIM     5
                LISTEND
.
HCHGS_FD    IFILE   VAR=26,KEYL=1,TEXT
HCHGS_NME   INIT    "hchgs.ix1"
HCHGS_LIST  LIST
HCHGS_FY    DIM     1  
HCHGS_PPO   FORM    5
HCHGS_EPO   FORM    5
HCHGS_HMO   FORM    5
HCHGS_MCO   FORM    5
HCHGS_ASO   FORM    5 
            LISTEND
. ----------------------------
. Program Specific Variables & Working Storage
. ----------------------------
SVE_ACCU      DIM  8               
LOOP_CNT      FORM 1
ACCU_ID1      DIM  8
WRK_PRD       DIM  5
WRK_EFF       DIM  8
WRITE_SW      DIM  1
N             INIT "N"     
Y             FORM 2
CNT_4         DIM  4
CNT_3         DIM  3
YN_ANS        DIM  1
DIMMM         DIM  2
DIMDD         DIM  2
DIMCCYY       DIM  4
FROM_ACCU     DIM  8
HLD_ACCU      DIM  8
FIRST_PAGE    DIM       1
FIRST_TIME    DIM       1
WORK_COUNT    DIM       8
FRONT         DIM       5
BACK          DIM       3
TIMESTAMP     DIM       14
CURRDATE      DIM       8
TRAP_DATA     DIM       500
CAL_CLOCK     DIM       21
ORIG_RETURN   FORM      5
CURR_RETURN   FORM      5
TODAY         DIM       8
. ...Report Fields

PAGE_NO       FORM      5
LINE_NO       FORM      3
LINE_MAX      FORM     "54"

R_PAGE_NO     DIM       5
R_DATE        DIM      10
R_TIME        DIM       8
YES           INIT     "Y"
NO            INIT     "N"

. ...Printing Controls

NORM_10       DIM      29
BOLD_10       DIM      29
NORM_12       DIM      26
BOLD_12       DIM      26
NORM_16       DIM      33
BOLD_16       DIM      33

ESC_CHAR      EQU      27
XCAPE         INIT     ESC_CHAR

PARAM_LIST    LIST
PARAM_XXX     DIM      10
PARAM_YYY     DIM       5
PARAM_DATE    DIM       6
              LISTEND

. ----------------------------
. Begin Program
. ----------------------------

. ----------------------------
. Start here if selected from menu   
. ----------------------------


         CALL      RUN_NOW

         CHAIN     C_NEXT

. ----------------------------
. Start here if called by the Scheduler    
. ----------------------------

         INC       SCHED_NP.SR              Scheduler routines (w/o printer)

RUN_NOW
. ...Check return stack
    RETCOUNT  ORIG_RETURN
. ----------------------------
. Fill top of screen
. ----------------------------

. ...Screen Display
         DISPLAY   *ES
         MOVE      "MENU"              TO  C_NEXT
         MOVE      "EXT HEALTH " TO  C_OPER
         MOVE      "A0504181"           TO  C_PROG
         MOVE      BLANKS              TO  C_LABEL
         MOVE      BLANKS              TO  C_FILE
         MOVE      BLANKS              TO  C_KEYS
         CLOCK     CALENDAR            INTO  CAL_CLOCK
         
         CALL X_BLANK_SCREEN

. ----------------------------
. Set Applicable Traps
. ----------------------------
         
. ...Set Applicable Traps
         TRAPSAVE  TRAP_DATA
         TRAPCLR   ALL
         TRAP      QUIT   NORESET  IF F9
	
. ----------------------------
. Get scheduler information
. ----------------------------

         CALL     SCHED_PICK

         IF (RUN_MODE = "B" OR RUN_MODE = "N")
            CALL      MAIN_PROCESS
         ENDIF
         RETURN

. ----------------------------
. Main Process
. ----------------------------

MAIN_PROCESS
    DEBUG
    CALL INITIALIZE
    CALL OPEN_FILES
    CALL CREATE_HLTN
    CALL PROCESS_HLTN_FILE
....Close Files
    CALL      CLOSE_FILES 
    CALL      X_DISPLAY_COUNTS
    TRAPREST  TRAP_DATA
    MOVE      SCH_RTSUCC  TO  SCH@RTCODE
    RETURN                                                   
.
CREATE_HLTN
        PACK      MEM_FK11 WITH BLANKS   
        CALL      FILE_READ USING MEM_FD:    ...File declaration list
               MEM_FN:   ...File name list
               MEM_FC:   ...(I)ndex or (A)imdex
               MEM_FV:   ...File key varlists
               MEM_FK:   ...File key sizes
               MEM_LIST: ...File record (field list)
               MEM_REC:  ...File record (packed)
               MEM_OLD:  ...File saved when read
               MEM_QTY:  ...Number of files
               1         ...File number for this read
            LOOP
              CALL      FILE_NEXT USING MEM_FD:    ...File declaration list
                     MEM_FN:   ...File name list
                     MEM_FC:   ...(I)ndex or (A)imdex
                     MEM_FV:   ...File key varlists
                     MEM_FK:   ...File key sizes
                     MEM_LIST: ...File record (field list)
                     MEM_REC:  ...File record (packed)
                     MEM_OLD:  ...File saved when read
                     MEM_QTY:  ...Number of files
                     1         ...File number for this read
              BREAK IF (RESULT <> 1)
              ADD 1 TO X_CNT1
              UNPACK X_CNT1 INTO CNT_4,CNT_3
              IF (CNT_3 = "000")
                  CALL X_DISPLAY_COUNTS
              ENDIF
              IF (MEM_REL <> "01")
                 CONTINUE
              ENDIF
              PACK MEME_FK11 WITH MEM_ID1,BLANKS
              CALL      FILE_READ USING MEME_FD:    ...File declaration list
                     MEME_FN:   ...File name list
                     MEME_FC:   ...(I)ndex or (A)imdex
                     MEME_FV:   ...File key varlists
                     MEME_FK:   ...File key sizes
                     MEME_LIST: ...File record (field list)
                     MEME_REC:  ...File record (packed)
                     MEME_OLD:  ...File saved when read
                     MEME_QTY:  ...Number of files
                     1         ...File number for this read
              LOOP
                CALL      FILE_NEXT USING MEME_FD:    ...File declaration list
                       MEME_FN:   ...File name list
                       MEME_FC:   ...(I)ndex or (A)imdex
                       MEME_FV:   ...File key varlists
                       MEME_FK:   ...File key sizes
                       MEME_LIST: ...File record (field list)
                       MEME_REC:  ...File record (packed)
                       MEME_OLD:  ...File saved when read
                       MEME_QTY:  ...Number of files
                       1         ...File number for this read
                BREAK IF (RESULT <> 1)
                BREAK IF (MEM_ID1 <> MEME_ID1)
                IF (SQUEEZE MEME_NET = "LIFE")
                   CONTINUE
                ENDIF
                IF (SQUEEZE MEME_TRM = "")
                   FILL "9" IN MEME_TRM 
                ENDIF
                IF (MEME_TRM < MEME_EFF)
                   CONTINUE 
                ENDIF
                IF (MEME_EFF > TODAY)
                   CONTINUE
                ENDIF
                IF (MEME_TRM <= TODAY)
                   CONTINUE
                ENDIF 
                MOVE MEM_ID1 TO HLTN_ID1
                MOVE HLTN_NME TO C_FILE
                MOVE OGB_SEQ1 TO OGB_SEQ
                CALL WRITE_OGBREC USING HLTN_FD,HLTN_NME,HLTN_LIST 
                CLEAR HLTN_LIST
                BREAK
              REPEAT
            REPEAT
            RETURN


. ----------------------------
. End of Main Process
. ----------------------------

PROCESS_HLTN_FILE
    CALL CLOSE_OGBFILE USING HLTN_FD,HLTN_NME
    CALL OPEN_OGBFILE USING HLTN_FD,HLTN_NME
 LOOP      
    MOVE OGB_SEQ1 TO OGB_SEQ
    CALL READ_OGBFILE USING HLTN_FD,HLTN_NME,HLTN_LIST
      IF (RESULT <> 1)
         BREAK 
      ENDIF
    ADD 1 TO X_CNT1
    UNPACK X_CNT1 INTO CNT_4,CNT_3
    IF (CNT_3 = "000")
       CALL X_DISPLAY_COUNTS
    ENDIF
    CALL CLOSE_OGBFILE USING MEME_DTE_FD,MEME_DTE_NME,MEME_DTE_LIST 
    CALL PREP_OGBFILE USING MEME_DTE_FD,MEME_DTE_NME 
    PACK MEM_FK11 WITH HLTN_ID1 
    CALL FILE_READ USING MEM_FD:             ...FILE DECLARATION LIST
                         MEM_FN:             ...FILE NAME LIST
                         MEM_FC:             ...TYPE OF INDEX
.                                             ...(I)NDEX or (A)IMDEX
                         MEM_FV:             ...FILE KEY VARLIST
                         MEM_FK:             ...FILE KEY SIZES
                         MEM_LIST:           ...FILE RECORD (FIELD LIST)
                         MEM_REC:            ...FILE RECORD (PACKED)
                         MEM_OLD:            ...FILE SAVED WHEN READ
                         MEM_QTY:            ...NUMBER OF FILES
                         1                    ...FILE NUMBER FOR THIS READ
    IF (RESULT <> 1)
       CONTINUE
    ENDIF
    PACK MEME_FK11 WITH MEM_ID1,BLANKS
    CALL  FILE_READ USING MEME_FD:  ...FILE DECLARATION LIST
        	           MEME_FN:  ...FILE NAME LIST  
		           MEME_FC:  ...TYPE OF INDEX   
.	  		             ...(I)NDEX OR (A)IMDEX
		           MEME_FV:  ...FILE KEY VARLISTS
		           MEME_FK:  ...FILE KEY SIZES  
		           MEME_LIST:...FILE RECORD (FIELD LIST)
		           MEME_REC: ...FILE RECORD (PACKED)
		           MEME_OLD: ...FILE SAVED WHEN READ
		           MEME_QTY: ...NUMBER OF FILES 
			   1	     ...FILE NUMBER FOR THIS READ
         LOOP
             CALL  FILE_NEXT USING MEME_FD:  ...FILE DECLARATION LIST
  	          	           MEME_FN:  ...FILE NAME LIST  
		                   MEME_FC:  ...TYPE OF INDEX   
.	  		                     ...(I)NDEX OR (A)IMDEX
		                   MEME_FV:  ...FILE KEY VARLISTS
		                   MEME_FK:  ...FILE KEY SIZES  
		                   MEME_LIST:...FILE RECORD (FIELD LIST)
		                   MEME_REC: ...FILE RECORD (PACKED)
		                   MEME_OLD: ...FILE SAVED WHEN READ
		                   MEME_QTY: ...NUMBER OF FILES 
			           1	     ...FILE NUMBER FOR THIS READ
            IF ((MEME_ID1 <> HLTN_ID1) OR (RESULT <> 1))
                CALL CLOSE_OGBFILE USING MEME_DTE_FD,MEME_DTE_NME,MEME_DTE_LIST 
                CLEAR SCRATCH
                PACK SCRATCH WITH MEME_DTE_NME," ",MEME_DTE_NME," 1-8 -t -u"
                SORT      SCRATCH
                   IF OVER
                      ERROR     HORZ="22",VERT="20":
                      BGCOL=C_ERRB,FGCOL=C_ERRF:
                      LNCOL=C_ERRL,SHADE="Y":
                      TEXT="SORT FAILED(a0504181.dte)"     
                      CHAIN     "MENU"
                   ENDIF
                CALL OPEN_OGBFILE USING MEME_DTE_FD,MEME_DTE_NME 
                CALL PROCESS_DTE_FILE
                BREAK
            ENDIF
            IF (SQUEEZE MEME_NET = "LIFE")
                CONTINUE
            ENDIF
            IF (SQUEEZE MEME_TRM = "")
                FILL "9" IN MEME_TRM
            ENDIF
            IF (MEME_TRM < MEME_EFF)
               CONTINUE 
            ENDIF
            IF (SQUEEZE MEM_ACCU = "")
              MOVE MEME_EFF TO MEME_FROM_DTE
              MOVE MEME_TRM TO MEME_THRU_DTE
              MOVE MEME_PRD TO MEME_PRODUCT
              MOVE MEME_DTE_NME TO C_FILE
              MOVE OGB_SEQ1 TO OGB_SEQ
              CALL WRITE_OGBREC USING MEME_DTE_FD,MEME_DTE_NME,MEME_DTE_LIST
              CONTINUE
            ELSE
              MOVE 1 TO LOOP_CNT
              MOVE MEM_ID1 TO ACCU_ID1
              MOVE MEM_ID1 TO SVE_ACCU
              CALL GET_LINKED_HIST
              CALL CLOSE_OGBFILE USING MEME_DTE_FD,MEME_DTE_NME,MEME_DTE_LIST 
              CLEAR SCRATCH
              PACK SCRATCH WITH MEME_DTE_NME," ",MEME_DTE_NME," 1-8 -t -u"
              SORT      SCRATCH
                   IF OVER
                      ERROR     HORZ="22",VERT="20":
                      BGCOL=C_ERRB,FGCOL=C_ERRF:
                      LNCOL=C_ERRL,SHADE="Y":
                      TEXT="SORT FAILED(a0504181.dte)"     
                      CHAIN     "MENU"
                   ENDIF
              CALL OPEN_OGBFILE USING MEME_DTE_FD,MEME_DTE_NME 
              CALL PROCESS_DTE_FILE
              BREAK
            ENDIF
         REPEAT
 REPEAT
 RETURN
.
GET_LINKED_HIST
 LOOP
    IF (LOOP_CNT <> 1)
      IF (ACCU_ID1 = SVE_ACCU)
         BREAK
      ENDIF
    ENDIF
    IF (SQUEEZE ACCU_ID1 = "")
       BREAK
    ENDIF  
    IF (LOOP_CNT > 7)
       BREAK
    ENDIF
    PACK MEM_FK11 WITH ACCU_ID1
    CALL FILE_READ USING MEM_FD:             ...FILE DECLARATION LIST
                         MEM_FN:             ...FILE NAME LIST
                         MEM_FC:             ...TYPE OF INDEX
.                                             ...(I)NDEX or (A)IMDEX
                         MEM_FV:             ...FILE KEY VARLIST
                         MEM_FK:             ...FILE KEY SIZES
                         MEM_LIST:           ...FILE RECORD (FIELD LIST)
                         MEM_REC:            ...FILE RECORD (PACKED)
                         MEM_OLD:            ...FILE SAVED WHEN READ
                         MEM_QTY:            ...NUMBER OF FILES
                         1                    ...FILE NUMBER FOR THIS READ
    IF (RESULT <> 1)
          ERROR     HORZ="22",VERT="20":
                    BGCOL=C_ERRB,FGCOL=C_ERRF:
                    LNCOL=C_ERRL,SHADE="Y":
                    TEXT="READ FAILED(MEM-2)"     
                    CHAIN     "MENU"
    ENDIF
    ADD 1 TO LOOP_CNT
    MOVE MEM_ACCU TO ACCU_ID1
    PACK MEME_FK11 WITH MEM_ID1,BLANKS
    CALL  FILE_READ USING MEME_FD:  ...FILE DECLARATION LIST
        	           MEME_FN:  ...FILE NAME LIST  
		           MEME_FC:  ...TYPE OF INDEX   
.	  		             ...(I)NDEX OR (A)IMDEX
		           MEME_FV:  ...FILE KEY VARLISTS
		           MEME_FK:  ...FILE KEY SIZES  
		           MEME_LIST:...FILE RECORD (FIELD LIST)
		           MEME_REC: ...FILE RECORD (PACKED)
		           MEME_OLD: ...FILE SAVED WHEN READ
		           MEME_QTY: ...NUMBER OF FILES 
			   1	     ...FILE NUMBER FOR THIS READ
             LOOP
                CALL  FILE_NEXT USING MEME_FD:  ...FILE DECLARATION LIST
  	          	           MEME_FN:  ...FILE NAME LIST  
		                   MEME_FC:  ...TYPE OF INDEX   
.	  		                     ...(I)NDEX OR (A)IMDEX
		                   MEME_FV:  ...FILE KEY VARLISTS
		                   MEME_FK:  ...FILE KEY SIZES  
		                   MEME_LIST:...FILE RECORD (FIELD LIST)
		                   MEME_REC: ...FILE RECORD (PACKED)
		                   MEME_OLD: ...FILE SAVED WHEN READ
		                   MEME_QTY: ...NUMBER OF FILES 
			           1	     ...FILE NUMBER FOR THIS READ
                IF ((MEM_ID1 <> MEME_ID1) OR (RESULT <> 1))
                   BREAK
                ENDIF
                IF (SQUEEZE MEME_NET = "LIFE")
                    CONTINUE
                ENDIF
                IF (SQUEEZE MEME_TRM = "")
                    MOVE "99999999" TO MEME_TRM
                ENDIF               
                IF (MEME_TRM < MEME_EFF)
                    CONTINUE
                ENDIF
                MOVE MEME_EFF TO MEME_FROM_DTE
                MOVE MEME_TRM TO MEME_THRU_DTE
                MOVE MEME_PRD TO MEME_PRODUCT
                MOVE MEME_DTE_NME TO C_FILE
                MOVE OGB_SEQ1 TO OGB_SEQ
                CALL WRITE_OGBREC USING MEME_DTE_FD,MEME_DTE_NME,MEME_DTE_LIST
                CONTINUE
             REPEAT 
 REPEAT
 RETURN
   

PROCESS_DTE_FILE
   CLEAR WRITE_SW
   CLEAR WRK_EFF
   CLEAR WRK_PRD
   LOOP
      MOVE OGB_SEQ1 TO OGB_SEQ
      CALL READ_OGBFILE USING MEME_DTE_FD,MEME_DTE_NME,MEME_DTE_LIST 
      IF (RESULT <> 1)
        BREAK
      ENDIF
      IF ((MEME_FROM_DTE < "20021201") AND (MEME_THRU_DTE> "20021201"))
         MOVE "N" TO WRITE_SW   	
      ENDIF
      IF (MEME_FROM_DTE >= "20021201")
         IF (SQUEEZE WRK_EFF = "")
            MOVE MEME_FROM_DTE TO WRK_EFF
            MOVE MEME_PRODUCT TO WRK_PRD
         ENDIF
      ENDIF
   REPEAT        
   IF (WRITE_SW <> "N")
     IF (SQUEEZE WRK_EFF <> "")
       IF ((WRK_EFF >= "20021201") AND (WRK_EFF <= "20030630"))
          MOVE "1" TO HCHGS_FY
       ELSE
         IF ((WRK_EFF >= "20030701") AND (WRK_EFF <= "20040630"))
           MOVE "2" TO HCHGS_FY
         ELSE
           IF ((WRK_EFF >= "20040701") AND (WRK_EFF <= "20050331"))
              MOVE "3" TO HCHGS_FY
           ENDIF
         ENDIF
       ENDIF
     ENDIF
     MOVE HCHGS_NME TO C_FILE
     CALL READ_OGBFILE_IX USING HCHGS_FD,HCHGS_NME,HCHGS_FY,HCHGS_LIST
           SWITCH WRK_PRD         
                CASE "PPO  "
                   ADD 1 TO HCHGS_PPO
                CASE "EPO  "
                   ADD 1 TO HCHGS_EPO
                CASE "HMO  "
                   ADD 1 TO HCHGS_HMO
                CASE "MCO  "
                   ADD 1 TO HCHGS_MCO
                CASE "ASO  "
                   ADD 1 TO HCHGS_ASO
             ENDSWITCH
     IF (RESULT = 1)
       MOVE HCHGS_NME TO C_FILE
       CALL UPDATE_OGBREC_IX USING HCHGS_FD,HCHGS_LIST
       CLEAR HCHGS_LIST
     ELSE
       MOVE HCHGS_NME TO C_FILE
       CALL WRITE_OGBREC_IX USING HCHGS_FD,HCHGS_NME,HCHGS_FY,HCHGS_LIST
       CLEAR HCHGS_LIST
     ENDIF
   ENDIF
   RETURN

. ----------------------------
. Operator pressed F9
. ----------------------------

QUIT
         IF (C_RMODE = "I")
            error     horz="23",vert="19":
                      bgcol=C_ERRB,fgcol=C_ERRF:
                      lncol=C_ERRL,shade="Y":
                      text=" Process Aborted by Operator ":
                      text="-----------------------------"
            messageerase
         ENDIF

         CLEAR     C_NOHIST

         TRAPREST  TRAP_DATA

         IF (RUN_MODE = "B")
            LOOP
               RETCOUNT  CURR_RETURN
               WHILE     (CURR_RETURN > ORIG_RETURN)
               NORETURN
            REPEAT
            MOVE      SCH_RTABRT  TO  SCH@RTCODE
            RETURN
         ENDIF
         CHAIN     "MENU"

INITIALIZE
         DISPLAY *P1:9,*ES
         CALL X_BLANK_SCREEN
         CLOCK     TIMESTAMP   INTO  TIMESTAMP
         CLOCK     TIMESTAMP   INTO  CURRDATE
         CLOCK     TIMESTAMP     TO  TODAY

. ...Display Counters
	 MOVE      "Recs Read:     " TO X_CNTDESC1
	 MOVE      "Recs Written:     " TO X_CNTDESC2

	 CALL      X_DISPLAY_COUNTS
         RETURN
.
OPEN_FILES
         CALL PREP_OGBFILE USING HLTN_FD,HLTN_NME               
         CALL PREP_OGBFILE USING MEME_DTE_FD,MEME_DTE_NME 
         CALL PREP_OGBFILE_IX USING HCHGS_FD,HCHGS_NME 
         RETURN

CLOSE_FILES
         CALL CLOSE_OGBFILE USING HLTN_FD,HLTN_NME               
         CALL CLOSE_OGBFILE USING MEME_DTE_FD,MEME_DTE_NME 
         CALL CLOSE_OGBFILE_IX USING HCHGS_FD,HCHGS_NME 
         RETURN

    INC       PRINT.SR
    INC       UTIL.SR      
    INC       VALID.IO
    INC       X_STANDARD.SR
    INC       FILE.IO

. ----------------------------
. Program Specific Includes
. ----------------------------

              INC       X_OGBFILE.IO

. +++++++++++++++++++++++++++++++++++++
. /End of ELG5000.PS
. +++++++++++++++++++++++++++++++++++++
