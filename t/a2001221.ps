++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ NAME:
+   a2001221.ps
+
+ DESCRIPTION:
+   Load MBI numbers from the report Paul provided
+
+ CREATED BY:
+   apjwh - 2020-01-22
+
+ LAST MODIFIED BY:
+   apjwh - 2020-01-22
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

.# =================================================================== #
.# Variable Includes
.# =================================================================== #
    INC VALID.RL
    INC UTIL_COMMON.CB
    INC UTIL_MEMMEM.CB

.# =================================================================== #
.# Scheduler Parameters
.# =================================================================== #

PARAM_LIST          LIST WITH NAMES
PARAM_TEST          CHAR    4
                    LISTEND

.# =================================================================== #
.# Equates for code clarity
.# =================================================================== #

V_FLAG              EQU     1   ...0 or 1
V_DATE              EQU     8   ...YYYYMMDD
MSG_HEIGHT          EQU     24

.# =================================================================== #
.# Configuration
.# =================================================================== #

REFRESH_RATE        EQU     3
PROG_NAME           INIT    "FX01221"
EMAIL_GROUP         INIT    "EligibilityReport@la.gov"

.# =================================================================== #
.# Debugging Configuration
.# =================================================================== #

ENABLE_TEST         NUM     V_FLAG
TEST_CONFIG         LIST
TEST_KEEP_WORK_FILE NUM     "0"
TEST_EMAILTO        INIT    "jakob.hendrix@la.gov"
TEST_READ_LIMIT     NUM     "0"
                    LISTEND

.# =================================================================== #
.# File Declarations
.# =================================================================== #

MBI_FD              FILE    VAR=500,TEXT
.MBI_FILE            INIT    "/w/mbi_updates_from_ogb.csv"
MBI_FILE            INIT    "/w/a2001221.csv"

LOG_FD              FILE    VAR=500,TEXT
LOG_FILE            CHAR    100
LOG_PREFIX          INIT    "/w/a2001221_log"
LOG_EXT             INIT    "csv"

UPDATE_FD           FILE    FIXED=X_INM_SIZE,TEXT
UPDATE_FILE         INIT    "a2001221.inm"

.# =================================================================== #
.# File lists
.# =================================================================== #

INPUT_REC           CHAR    500
INPUT_LIST          VARLIST INPUT_REC

LOG_HEADER          VARLIST "LOG_TYPE",COMMA:
                            "PROVIDED_ID1",COMMA:
                            "PROVIDED_MBI",COMMA:
                            "MEMO_ID2",COMMA:
                            "MESSAGE"

LOG_REC             CHAR    500
LOG_LIST            VARLIST LOG_REC

.# =================================================================== #
.# Program Variables
.# =================================================================== #

CURRDATE            CHAR    8
START_DATETIME      CHAR    24
END_DATETIME        CHAR    24

FILES_DIR           CHAR    100

INPUT_ID1           CHAR    8
INPUT_MBI           CHAR    50

THIS_MEM            CHAR    X_MEM_SIZE

MEMO_MAX            EQU     50
MEMO_CNT            NUM     5
MEMO_RECS           CHAR    X_MEMO_SIZE[MEMO_MAX]

.# =================================================================== #
.# Begin Program
.# =================================================================== #
.Manual and Autosys
    CALL RUN_NOW
    CHAIN C_NEXT    ...go to next program (usually the Menu)

.Impact Scheduler Hook
    INC SCHED_NP.SR     ...for jobs that don't use the print system


.#######################################################################
RUN_NOW ROUTINE
+ Configure runtime settings

.Save stack size at program start
    RETCOUNT ORIG_RETURN

.Set applicable traps
    TRAPSAVE TRAP_DATA
    TRAPCLR ALL
    TRAP QUIT NORESET IF F9

.Get run date
    CLOCK TIMESTAMP INTO CURRDATE

    MOVE "a2001221" TO C_PROG        ...Program name
    MOVE "LOAD MBI NUMS" TO C_OPER  ...Program description
    MOVE "MENU" TO C_NEXT
    MOVE "RUN_NOW" TO C_LABEL
    MOVE BLANKS TO C_FILE
    MOVE BLANKS TO C_KEYS

.Check if the program was called from the command line
    IF (C_CMDPAR)
        CALL CMD_START USING C_PROG
    ELSE
        CALL X_BLANK_SCREEN
    ENDIF

.Configure test options based on file mode. Default is Production
    CALL UTIL_SET_TESTMODE USING PARAM_TEST:  ...scheduler param
                                 ENABLE_TEST:  ...test toggle
                                 TEST_CONFIG  ...test settings list

    CALL RUN_UNIT_TESTS

.Set up run mode or build SCH record
    CALL SCHED_PICK

    SWITCH RUN_MODE
        CASE "N" | "B"
            CALL MAIN_PROCESS
        DEFAULT
    ENDSWITCH

    CALL NORMAL_EOJ

    RETURN
    ENDROUTINE


.#######################################################################
MAIN_PROCESS LROUTINE
+ Core logic
    debug
    CALL INITIALIZE
    CALL PROCESS_MBI_FILE
    CALL CLEAN_UP

    RETURN
    ENDROUTINE


.#######################################################################
INITIALIZE LROUTINE
+ Setup runtime variables
    CLOCK TIMESTAMP TO CURRDATE
    CLOCK CALENDAR TO START_DATETIME

    MOVE "Input files Read      " TO X_CNTDESC1
    MOVE "MBIs Found            " TO X_CNTDESC2
    MOVE "Errors                " TO X_CNTDESC3
    MOVE "Medicare Recs Reviewed" TO X_CNTDESC4
    MOVE "Matches               " TO X_CNTDESC5
    MOVE "Updates               " TO X_CNTDESC6

    CALL X_ZERO_COUNTS
    IF (NOT C_CMDPAR)
        CALL X_DISPLAY_COUNTS
    ENDIF

    CALL UTIL_GET_FILES_DIR USING FILES_DIR

    PACK LOG_FILE WITH LOG_PREFIX,"_",CURRDATE,".",LOG_EXT

    RETURN
    ENDROUTINE


.#######################################################################
PROCESS_MBI_FILE LROUTINE
+ Process the OGB file of Ids and MBI numbers
FIRST_READ      NUM     V_FLAG
...
    CALL OPEN_OGBFILE USING MBI_FD,MBI_FILE
    CALL PREP_OGBFILE USING UPDATE_FD,UPDATE_FILE
    CALL PREP_OGBFILE USING LOG_FD,LOG_FILE
    CALL WRITE_OGBREC_SEQ USING LOG_FD,LOG_FILE,LOG_HEADER

    SET FIRST_READ
    LOOP
        CLEAR THIS_MEM,MEMO_RECS,MEMO_CNT,MEMO_LIST

        CALL READ_OGBFILE_SEQ USING MBI_FD,MBI_FILE,INPUT_LIST
        WHILE (RESULT = 1)

        IF (FIRST_READ) .Skip the header
            CLEAR FIRST_READ
            CONTINUE
        ENDIF

        CALL UTIL_XCOUNTER USING X_CNT1,REFRESH_RATE
        CALL SPLIT_INPUT_REC
        IF (CHOP INPUT_ID1 = "")
            debug
            CALL LOG_ERROR USING "IMPACT id not provided"
            CONTINUE
        ENDIF
        IF (CHOP INPUT_MBI = "")
            debug
            CALL LOG_ERROR USING "MBI number not provided"
            CONTINUE
        ENDIF

        CALL IS_VALID_MBI USING INPUT_MBI
        IF NOT EQUAL
            debug
            CALL LOG_ERROR USING "Invalid MBI Number"
            CONTINUE
        ENDIF

        CALL UTIL_MEM_FIND USING INPUT_ID1
        IF NOT EQUAL
            debug
            CALL LOG_ERROR USING "Member not found in IMPACT"
            CONTINUE
        ENDIF

        PACK THIS_MEM WITH MEM_LIST

        debug .do work
        CALL UTIL_XCOUNTER USING X_CNT2,REFRESH_RATE

        CALL GET_MEDICARE_RECS
        IF (MEMO_CNT = 0)
            debug
            CLEAR MEMO_LIST
            CALL LOG_MSG USING "No current/future medicare records found to update"
            CONTINUE
        ENDIF
        CALL UPDATE_MEDICARE_RECS

    REPEAT

    CALL CLOSE_OGBFILE USING MBI_FD,MBI_FILE
    CALL CLOSE_OGBFILE USING LOG_FD,LOG_FILE
    CALL CLOSE_OGBFILE USING UPDATE_FD,UPDATE_FILE

    RETURN
    ENDROUTINE


.#######################################################################
GET_MEDICARE_RECS LROUTINE
+ Add all current or future Medicare records to the array
FIRST_MEMO      NUM     1
...
    FILL " " IN MEMO_RECS
    CLEAR MEMO_RECS,MEMO_CNT

    SET FIRST_MEMO
    LOOP
        IF (FIRST_MEMO)
            CLEAR FIRST_MEMO
            CALL UTIL_MEMO_FIND USING INPUT_ID1,""
        ELSE
            CALL UTIL_MEMO_NEXT
        ENDIF
        WHILE EQUAL

.Only handle medicare records
        SWITCH MEMO_TYPE
            CASE "MEDA" | "MEDB"
            DEFAULT
                CONTINUE
        ENDSWITCH

.Normalize terms for comparison
        IF (CHOP MEMO_EFF > "" & CHOP MEMO_TRM = "")
            PACK MEMO_TRM WITH LAST_DATE
        ENDIF
        IF (CHOP MEMO_EFF1 > "" & CHOP MEMO_TRM1 = "")
            PACK MEMO_TRM1 WITH LAST_DATE
        ENDIF

.Filter termed records
        IF (CHOP MEMO_EFF > "")
            CONTINUE IF (MEMO_TRM < CURRDATE)
        ELSE IF (CHOP MEMO_EFF1 > "")
            CONTINUE IF (MEMO_TRM1 < CURRDATE)
        ELSE
            debug .weird
            CALL LOG_ERROR USING ("MEMO record found with no effective dates - id: " + (MEMO_ID2))
        ENDIF

        CALL UTIL_SAFE_PACK_ARRAY_LIST USING MEMO_LIST:
                                             MEMO_RECS:
                                             MEMO_CNT:
                                             MEMO_MAX
    REPEAT

    RETURN
    ENDROUTINE


.#######################################################################
UPDATE_MEDICARE_RECS LROUTINE
+ Update any Medicare records that don't have the given policy number
REC         NUM     5
...
    FOR REC FROM 1 TO MEMO_CNT
        CALL UTIL_XCOUNTER USING X_CNT4,REFRESH_RATE

        UNPACK MEMO_RECS[REC] INTO MEMO_LIST
        IF (CHOP MEMO_POL = CHOP INPUT_MBI)
            debug
            CALL LOG_MSG USING "policy number already matches - MEMO skipped"
            CALL UTIL_XCOUNTER USING X_CNT5,REFRESH_RATE
            CONTINUE
        ENDIF
        debug

        IF (CHOP MEMO_POL > "")
            CALL SET_HICN_IN_NOTES
        ENDIF

        PACK MEMO_POL WITH INPUT_MBI,BLANKS

        CALL UPDATE_MEMO
    REPEAT

    RETURN
    ENDROUTINE


.#######################################################################
UPDATE_MEMO LROUTINE
+ Write an update rec
    CALL UTIL_XCOUNTER USING X_CNT6,REFRESH_RATE

    FILL " " IN INM_LIST,INM_REC,MEME_LIST
    PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST
    UNPACK INM_REC INTO INM_LIST

    debug
.set change metadata
    PACK INMO_CHGBY WITH PROG_NAME,BLANKS
    FILL " " IN INMO_CHGDT

.de-normalize term dates
    IF (INMO_TRM = LAST_DATE)
        FILL "~" IN INMO_TRM
    ENDIF
    IF (INMO_TRM1 = LAST_DATE)
        FILL "~" IN INMO_TRM1
    ENDIF

    CALL LOG_MSG USING "MEMO updated with new policy number"
    CALL WRITE_OGBREC_SEQ USING UPDATE_FD,UPDATE_FILE,INM_LIST

    RETURN
    ENDROUTINE


.#######################################################################
SPLIT_INPUT_REC LROUTINE
+ Unpack the input rec into data fields

    CLEAR INPUT_ID1:
          INPUT_MBI

    CALL DELIMIT_STRING USING INPUT_REC,0,INPUT_ID1,COMMA
    CALL DELIMIT_STRING USING INPUT_REC,1,INPUT_MBI,COMMA

    RETURN
    ENDROUTINE


.#######################################################################
SET_HICN_IN_NOTES LROUTINE
+ Save the current HICN as a quick note
NEW_MSG     CHAR    40
...
    debug
    PACK NEW_MSG WITH "PRIOR ID: ",(CHOP MEMO_POL),BLANKS
    IF (CHOP MEMO_NOTE1 > "")
        IF (CHOP MEMO_NOTE2 = "")
            PACK MEMO_NOTE2 WITH MEMO_NOTE1,BLANKS
        ELSE
            PACK MEMO_NOTE3 WITH MEMO_NOTE2,BLANKS
            PACK MEMO_NOTE2 WITH MEMO_NOTE1,BLANKS
        ENDIF
    ENDIF

    PACK MEMO_NOTE1 WITH NEW_MSG,BLANKS

    RETURN
    ENDROUTINE


.#######################################################################
LOG_MSG LROUTINE MSG@
+ Update the log file with a message
MSG@        CHAR    @
...
    CALL WRITE_LOG USING "LOG",MSG@

    RETURN
    ENDROUTINE


.#######################################################################
LOG_ERROR LROUTINE ERR@
+ Update the log file with an error
ERR@        CHAR    @
...
    CALL UTIL_XCOUNTER USING X_CNT3,REFRESH_RATE
    CALL WRITE_LOG USING "ERROR",ERR@

    RETURN
    ENDROUTINE


.#######################################################################
WRITE_LOG LROUTINE TYPE@,MSG@
+ Update the log file
TYPE@       CHAR    @
MSG@        CHAR    @
...
    SWITCH TYPE@
        CASE "LOG" | "ERROR"
        DEFAULT
            debug
            CALL UTIL_ERRORMSG USING "Invalid Log Type","WRITE_LOG"
    ENDSWITCH

    PACK LOG_REC WITH TYPE@,COMMA:
                      (SQUEEZE INPUT_ID1),COMMA:
                      (SQUEEZE INPUT_MBI),COMMA:
                      (SQUEEZE MEMO_ID2),COMMA:
                      (CHOP MSG@)

    CALL WRITE_OGBREC_SEQ USING LOG_FD,LOG_FILE,LOG_LIST

    RETURN
    ENDROUTINE


.#######################################################################
CLEAN_UP LROUTINE
+ Cleanup work files and handle output files
    debug
    CLOCK CALENDAR INTO END_DATETIME

    CALL UTIL_PENDING_BACKUP USING FILES_DIR,UPDATE_FILE,""
    CALL UTIL_TRIM_TRAILING_SPACE USING LOG_FILE,LOG_FILE
    CALL UTIL_PENDING_BACKUP USING "/w/",LOG_FILE,""

    CALL EMAIL_LOG USING LOG_FILE
    CALL UTIL_DELETE_FILE USING LOG_FILE

    RETURN
    ENDROUTINE


.#######################################################################
EMAIL_LOG LROUTINE LOGFILE@
+ Email the log file to APPS
LOGFILE@        CHAR    @
EMAILTO         CHAR    200
SUBJECT         CHAR    200
BODY            CHAR    5000
...
    IF (CHOP TEST_EMAILTO > "")
        PACK EMAILTO WITH TEST_EMAILTO
    ELSE
        PACK EMAILTO WITH EMAIL_GROUP
    ENDIF

    PACK SUBJECT WITH "ADHOC: IMPACT Medicare Id Load"
    PACK BODY WITH "":
        "This process loads MBI numbers from an OGB-provided CSV.\n":
        "\t> Members Processed: ",(TRIM (CHAR X_CNT1)),"\n":
        "\t> Errors: ",(TRIM (CHAR X_CNT3)),"\n":
        "\t> Updates: ",(TRIM (CHAR X_CNT6))

    IF (X_CNT6 > 1)
        PACK SUBJECT WITH SUBJECT," - Updates"
        CALL UTIL_EMAIL_NEOJ USING C_PROG:
            EMAILTO:
            SUBJECT:
            BODY:
            START_DATETIME:
            END_DATETIME:
            LOGFILE@

    ELSE
        PACK SUBJECT WITH SUBJECT," - No Updates"
        CALL UTIL_EMAIL_NEOJ USING C_PROG:
            EMAILTO:
            SUBJECT:
            BODY:
            START_DATETIME:
            END_DATETIME
    ENDIF

    RETURN
    ENDROUTINE


.#######################################################################
RUN_UNIT_TESTS LROUTINE
+ Test testables
INPUT1      CHAR    500
OUTPUT1     CHAR    500
...
    PACK INPUT1 WITH "a,b,c"
    CALL DELIMIT_STRING USING INPUT1,0,OUTPUT1,COMMA
    IF (CHOP OUTPUT1 != "a")
        debug
        CALL UTIL_ERRORMSG USING "UNIT TEST FAILED - delimite_string":
            "RUN_UNIT_TESTS"
    ENDIF

    PACK INPUT1 WITH "a,b,c"
    CALL DELIMIT_STRING USING INPUT1,1,OUTPUT1,COMMA
    IF (CHOP OUTPUT1 != "b")
        debug
        CALL UTIL_ERRORMSG USING "UNIT TEST FAILED - delimite_string":
            "RUN_UNIT_TESTS"
    ENDIF

    PACK INPUT1 WITH "a,b,c"
    CALL DELIMIT_STRING USING INPUT1,2,OUTPUT1,COMMA
    IF (CHOP OUTPUT1 != "c")
        debug
        CALL UTIL_ERRORMSG USING "UNIT TEST FAILED - delimite_string":
            "RUN_UNIT_TESTS"
    ENDIF

    PACK INPUT1 WITH "a,b,c"
    CALL DELIMIT_STRING USING INPUT1,3,OUTPUT1,COMMA
    IF (CHOP OUTPUT1 > "")
        debug
        CALL UTIL_ERRORMSG USING "UNIT TEST FAILED - delimite_string":
            "RUN_UNIT_TESTS"
    ENDIF

    FILL " " IN INPUT1
    CALL DELIMIT_STRING USING INPUT1,0,OUTPUT1,COMMA
    IF (CHOP OUTPUT1 > "")
        debug
        CALL UTIL_ERRORMSG USING "UNIT TEST FAILED - delimite_string":
            "RUN_UNIT_TESTS"
    ENDIF

    PACK INPUT1 WITH "ABC"
    CALL DELIMIT_STRING USING INPUT1,0,OUTPUT1,COMMA
    IF (CHOP OUTPUT1 != "ABC")
        debug
        CALL UTIL_ERRORMSG USING "UNIT TEST FAILED - delimite_string":
            "RUN_UNIT_TESTS"
    ENDIF

    PACK INPUT1 WITH "ABC"
    CALL DELIMIT_STRING USING INPUT1,1,OUTPUT1,COMMA
    IF (CHOP OUTPUT1 > "")
        debug
        CALL UTIL_ERRORMSG USING "UNIT TEST FAILED - delimite_string":
            "RUN_UNIT_TESTS"
    ENDIF

    PACK INPUT1 WITH "ABC"
    CALL DELIMIT_STRING USING INPUT1,100,OUTPUT1,COMMA
    IF (CHOP OUTPUT1 > "")
        debug
        CALL UTIL_ERRORMSG USING "UNIT TEST FAILED - delimite_string":
            "RUN_UNIT_TESTS"
    ENDIF

    PACK INPUT1 WITH ",,a,,b,,"
    CALL DELIMIT_STRING USING INPUT1,0,OUTPUT1,COMMA
    IF (CHOP OUTPUT1 > "")
        debug
        CALL UTIL_ERRORMSG USING "UNIT TEST FAILED - delimite_string":
            "RUN_UNIT_TESTS"
    ENDIF

    PACK INPUT1 WITH ",,a,,b,,"
    CALL DELIMIT_STRING USING INPUT1,2,OUTPUT1,COMMA
    IF (CHOP OUTPUT1 != "a")
        debug
        CALL UTIL_ERRORMSG USING "UNIT TEST FAILED - delimite_string":
            "RUN_UNIT_TESTS"
    ENDIF

    PACK INPUT1 WITH ",,a,,b,,"
    CALL DELIMIT_STRING USING INPUT1,3,OUTPUT1,COMMA
    IF (CHOP OUTPUT1 > "")
        debug
        CALL UTIL_ERRORMSG USING "UNIT TEST FAILED - delimite_string":
            "RUN_UNIT_TESTS"
    ENDIF

    PACK INPUT1 WITH ",,a,,b,,"
    CALL DELIMIT_STRING USING INPUT1,4,OUTPUT1,COMMA
    IF (CHOP OUTPUT1 != "b")
        debug
        CALL UTIL_ERRORMSG USING "UNIT TEST FAILED - delimite_string":
            "RUN_UNIT_TESTS"
    ENDIF

    RETURN
    ENDROUTINE


.# =================================================================== #
.# Subroutines Includes
.# =================================================================== #
    INC VALID.IO
    INC UTIL_COMMON.SR
    INC UTIL_TEST.SR
    INC UTIL_DATA.SR
    INC UTIL_SYSTEM.SR
    INC UTIL_MEMMEM.SR
    INC UTIL_EMAIL.SR
    INC UTIL_VALID.SR
    INC VALCMSID.SR

.# =================================================================== #
.# End of Program
.# =================================================================== #
