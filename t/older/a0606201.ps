.     *********************************************************************
.     *             STATE EMPLOYEES GROUP BENEFITS PROGRAM                *
.     *********************************************************************
.     *                                                                   *
.     * PROGRAM NAME: A0606201                                            *
.     *                                                                   *
.     * DESCRIPTION: WALK-OVER FOR AGENCY 8340                            * 
.     *                                                                   *
.     * PROGRAM NOTES AND REVISIONS:                                      *
.     *                                                                   *
.     * APSJM 06/20/2006 A0606201 ADH - INITIAL VERSION.                  *
.     *********************************************************************
. ----------------------------
. Required Program Includes
. ----------------------------

              INC       COMMON.CB            ...Common work area
              INC       X_COMMON.CB          ...OGB Common Work Area
              INC       VALID.RL             ...Valid codes
              INC       X_OGBFILE.CB         ...OGB Custom File Handler
              
. ----------------------------
. Program Specific Includes
. ----------------------------
              INC       MEM.RL           ...Member Demographics 
              INC       D_MEMMEM.CB      ...Eligibility load
              INC       MEME.RL                                  
              INC       MEMO.RL                               
              INC       MEMS.RL                                  
. ----------------------------
. File Declarations
. ----------------------------
.
DHH_FD        FILE      VAR=33,TEXT
DHH_NAME      INIT      "/w/dhh.txt"     
DHH_LIST      LIST
DHH_LEV1      DIM       4
DHH_FILL1     DIM       4
DHH_LEV2      DIM       2
DHH_FILL2     DIM       6
DHH_ID1       DIM       8
DHH_FILL3     DIM       5
DHH_ID2       DIM       4
              LISTEND
.
U_DHH_FD      FILE     VAR=2300,TEXT
U_DHH_NAME    INIT    "dhh_upd.txt"      
.
DHH_ERR_FD    FILE    VAR=15,TEXT
DHH_ERR_NAME  INIT    "/w/dhh_err.txt"
DHH_ERR_LIST  LIST
DHH_ERR_ID1   DIM     8
DHH_ERR_FIL1  DIM     1
DHH_ERR_DIM_6 DIM     6
              LISTEND
. ----------------------------
. ----------------------------
. ----------------------------
. Program Specific Variables & Working Storage
. ------------------------
DIM_6         DIM  6
FIRST_READ    DIM  1
CNT1_4        DIM  4
CNT1_3        DIM  3
CNT3_4        DIM  4
CNT3_3        DIM  3
CNT_4         DIM  4
CNT_3         DIM  3
FIRST_TIME    DIM       1
WORK_COUNT    DIM       8
FRONT         DIM       5
BACK          DIM       3
TIMESTAMP     DIM       14
CURRDATE      DIM       8
TRAP_DATA     DIM       500
CAL_CLOCK     DIM       21
ORIG_RETURN   FORM      5
CURR_RETURN   FORM      5
TODAY         DIM       8
PARAM_LIST    LIST
PARAM_XXX     DIM      10
PARAM_YYY     DIM       5
PARAM_DATE    DIM       8
              LISTEND

. ----------------------------
. Begin Program
. ----------------------------

. ----------------------------
. Start here if selected from menu   
. ----------------------------


         CALL      RUN_NOW

         CHAIN     C_NEXT

. ----------------------------
. Start here if called by the Scheduler    
. ----------------------------

         INC       SCHED_NP.SR              Scheduler routines (w/o printer)

RUN_NOW
. ...Check return stack
    RETCOUNT  ORIG_RETURN
. ----------------------------
. Fill top of screen
. ----------------------------

. ...Screen Display
         DISPLAY   *ES
         MOVE      "A0606201"        TO  C_PROG
         MOVE      "FIX DHH"        TO  C_OPER
         MOVE      BLANKS              TO  C_LABEL
         MOVE      BLANKS              TO  C_FILE
         MOVE      BLANKS              TO  C_KEYS
         CLOCK     CALENDAR            INTO  CAL_CLOCK
         
         CALL X_BLANK_SCREEN

. ----------------------------
. Set Applicable Traps
. ----------------------------
         
. ...Set Applicable Traps
         TRAPSAVE  TRAP_DATA
         TRAPCLR   ALL
         TRAP      QUIT   NORESET  IF F9
	
. ----------------------------
. Get scheduler information
. ----------------------------

         CALL     SCHED_PICK

         IF (RUN_MODE = "B" OR RUN_MODE = "N")
            CALL      MAIN_PROCESS
         ENDIF
         RETURN

. ----------------------------
. Main Process
. ----------------------------

MAIN_PROCESS
   DEBUG
   CALL INITIALIZE
   CALL OPEN_FILES
   CALL PROCESS_WRK
....Close Files
   CALL      CLOSE_FILES 
   CALL      X_DISPLAY_COUNTS
   TRAPREST  TRAP_DATA
   MOVE      SCH_RTSUCC  TO  SCH@RTCODE
   MOVE      "MENU"        TO C_NEXT
   RETURN                                                   
. ----------------------------
. End of Main Process
. ----------------------------
PROCESS_WRK
    MOVE OGB_SEQ1 TO OGB_SEQ
 LOOP
    CALL READ_OGBFILE USING DHH_FD,DHH_NAME,DHH_LIST
    IF (RESULT <> 1)
        BREAK
    ENDIF
    ADD 1 TO X_CNT1
    UNPACK X_CNT1 INTO CNT1_4,CNT1_3
    IF (CNT1_3 = "000")
        CALL X_DISPLAY_COUNTS
    ENDIF
.------------------------         
...Get info from MEM-FILE
.------------------------
    PACK MEM_FK11 WITH DHH_ID1,BLANKS
    CALL FILE_READ USING MEM_FD:            ...FILE DECLARATION LIST
                       MEM_FN:            ...FILE NAME LIST
                       MEM_FC:            ...TYPE OF INDEX
.                                          ...(I)NDEX or (A)IMDEX
                       MEM_FV:            ...FILE KEY VARLISTS
                       MEM_FK:            ...FILE KEY SIZES
                       MEM_LIST:          ...FILE RECORD (FIELD LIST)
                       MEM_REC:           ...FILE RECORD (PACKED)
                       MEM_OLD:           ...FILE SAVED WHEN READ
                       MEM_QTY:           ...NUMBER OF FILES
                       1                   ...FILE NUMBER FOR THIS READ
    IF (RESULT <> 1)
       CONTINUE
    ENDIF
    CLEAR MEME_SAV
    PACK MEME_FK11 WITH DHH_ID1,DHH_ID2
    CALL  FILE_READ USING MEME_FD:  ...FILE DECLARATION LIST
        	           MEME_FN:  ...FILE NAME LIST  
	                   MEME_FC:  ...TYPE OF INDEX   
.	  		             ...(I)NDEX OR (A)IMDEX
		           MEME_FV:  ...FILE KEY VARLISTS
		           MEME_FK:  ...FILE KEY SIZES  
		           MEME_LIST:...FILE RECORD (FIELD LIST)
		           MEME_REC: ...FILE RECORD (PACKED)
		           MEME_OLD: ...FILE SAVED WHEN READ
		           MEME_QTY: ...NUMBER OF FILES 
			   1	     ...FILE NUMBER FOR THIS READ
   IF (RESULT <> 1)
      CONTINUE
   ENDIF
   PACK MEME_SAV WITH MEME_LIST
   PACK MEME_FK11 WITH DHH_ID1,BLANKS 
   CALL  FILE_READ USING MEME_FD:  ...FILE DECLARATION LIST
        	           MEME_FN:  ...FILE NAME LIST  
	                   MEME_FC:  ...TYPE OF INDEX   
.	  		             ...(I)NDEX OR (A)IMDEX
		           MEME_FV:  ...FILE KEY VARLISTS
		           MEME_FK:  ...FILE KEY SIZES  
		           MEME_LIST:...FILE RECORD (FIELD LIST)
		           MEME_REC: ...FILE RECORD (PACKED)
		           MEME_OLD: ...FILE SAVED WHEN READ
		           MEME_QTY: ...NUMBER OF FILES 
			   1	     ...FILE NUMBER FOR THIS READ

    LOOP
      CALL  FILE_NEXT USING MEME_FD:  ...FILE DECLARATION LIST
        	           MEME_FN:  ...FILE NAME LIST  
	                   MEME_FC:  ...TYPE OF INDEX   
.	  		             ...(I)NDEX OR (A)IMDEX
		           MEME_FV:  ...FILE KEY VARLISTS
		           MEME_FK:  ...FILE KEY SIZES  
		           MEME_LIST:...FILE RECORD (FIELD LIST)
		           MEME_REC: ...FILE RECORD (PACKED)
		           MEME_OLD: ...FILE SAVED WHEN READ
		           MEME_QTY: ...NUMBER OF FILES 
			   1	     ...FILE NUMBER FOR THIS READ
        IF ((RESULT <> 1) OR (DHH_ID1 <> MEME_ID1))
            BREAK
        ENDIF
        IF (MEME_CHGDT > "20060618")
           MOVE DHH_ID1 TO DHH_ERR_ID1
           MOVE DIM_6 TO DHH_ERR_DIM_6
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING DHH_ERR_FD,DHH_ERR_NAME,DHH_ERR_LIST
           CLEAR DHH_ERR_LIST
           CLEAR MEME_SAV
           BREAK   
        ENDIF
    REPEAT
   IF (SQUEEZE MEME_SAV = "")
       CONTINUE
   ENDIF
   CLEAR DIM_6
   PACK DIM_6 WITH DHH_LEV1,DHH_LEV2
   UNPACK MEME_SAV INTO MEME_LIST
   SWITCH DIM_6
       CASE "834200"
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST
           UNPACK INM_REC INTO INM_LIST
           MOVE "DELETE" TO INME_NEWBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           MOVE "8340 " TO MEME_LEV1
           MOVE "42   " TO MEME_LEV2
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST 
           UNPACK INM_REC INTO INM_LIST
           CLEAR INME_ID1
           CLEAR INME_ID2
           CLEAR INM_NEWBY
           CLEAR INME_NEWBY
           CLEAR INM_CHGBY
           CLEAR INME_CHGBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           ADD 1 TO X_CNT2
       CASE "834400"
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST
           UNPACK INM_REC INTO INM_LIST
           MOVE "DELETE" TO INME_NEWBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           MOVE "8340 " TO MEME_LEV1
           MOVE "44   " TO MEME_LEV2
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST 
           UNPACK INM_REC INTO INM_LIST
           CLEAR INME_ID1
           CLEAR INME_ID2
           CLEAR INM_NEWBY
           CLEAR INME_NEWBY
           CLEAR INM_CHGBY
           CLEAR INME_CHGBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           ADD 1 TO X_CNT2
       CASE "834600"
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST
           UNPACK INM_REC INTO INM_LIST
           MOVE "DELETE" TO INME_NEWBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           MOVE "8340 " TO MEME_LEV1
           MOVE "46   " TO MEME_LEV2
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST 
           UNPACK INM_REC INTO INM_LIST
           CLEAR INME_ID1
           CLEAR INME_ID2
           CLEAR INM_NEWBY
           CLEAR INME_NEWBY
           CLEAR INM_CHGBY
           CLEAR INME_CHGBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           ADD 1 TO X_CNT2
       CASE "834700"
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST
           UNPACK INM_REC INTO INM_LIST
           MOVE "DELETE" TO INME_NEWBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           MOVE "8340 " TO MEME_LEV1
           MOVE "47   " TO MEME_LEV2
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST 
           UNPACK INM_REC INTO INM_LIST
           CLEAR INME_ID1
           CLEAR INME_ID2
           CLEAR INM_NEWBY
           CLEAR INME_NEWBY
           CLEAR INM_CHGBY
           CLEAR INME_CHGBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           ADD 1 TO X_CNT2
       CASE "834701"
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST
           UNPACK INM_REC INTO INM_LIST
           MOVE "DELETE" TO INME_NEWBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           MOVE "8340 " TO MEME_LEV1
           MOVE "54   " TO MEME_LEV2
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST 
           UNPACK INM_REC INTO INM_LIST
           CLEAR INME_ID1
           CLEAR INME_ID2
           CLEAR INM_NEWBY
           CLEAR INME_NEWBY
           CLEAR INM_CHGBY
           CLEAR INME_CHGBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           ADD 1 TO X_CNT2
       CASE "834702"
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST
           UNPACK INM_REC INTO INM_LIST
           MOVE "DELETE" TO INME_NEWBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           MOVE "8340 " TO MEME_LEV1
           MOVE "43   " TO MEME_LEV2
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST 
           UNPACK INM_REC INTO INM_LIST
           CLEAR INME_ID1
           CLEAR INME_ID2
           CLEAR INM_NEWBY
           CLEAR INME_NEWBY
           CLEAR INM_CHGBY
           CLEAR INME_CHGBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           ADD 1 TO X_CNT2
       CASE "834800"
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST
           UNPACK INM_REC INTO INM_LIST
           MOVE "DELETE" TO INME_NEWBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           MOVE "8340 " TO MEME_LEV1
           MOVE "48   " TO MEME_LEV2
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST 
           UNPACK INM_REC INTO INM_LIST
           CLEAR INME_ID1
           CLEAR INME_ID2
           CLEAR INM_NEWBY
           CLEAR INME_NEWBY
           CLEAR INM_CHGBY
           CLEAR INME_CHGBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           ADD 1 TO X_CNT2
       CASE "834900"
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST
           UNPACK INM_REC INTO INM_LIST
           MOVE "DELETE" TO INME_NEWBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           MOVE "8340 " TO MEME_LEV1
           MOVE "49   " TO MEME_LEV2
           CLEAR MEMO_LIST
           CLEAR MEMS_LIST
           PACKLEN INM_REC WITH MEM_LIST,MEME_LIST,MEMO_LIST,MEMS_LIST 
           UNPACK INM_REC INTO INM_LIST
           CLEAR INME_ID1
           CLEAR INME_ID2
           CLEAR INM_NEWBY
           CLEAR INME_NEWBY
           CLEAR INM_CHGBY
           CLEAR INME_CHGBY
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING U_DHH_FD,U_DHH_NAME,INM_LIST
           CLEAR INM_LIST
           ADD 1 TO X_CNT2
       DEFAULT      
           MOVE DHH_ID1 TO DHH_ERR_ID1
           MOVE DIM_6 TO DHH_ERR_DIM_6
           MOVE OGB_SEQ1 TO OGB_SEQ
           CALL WRITE_OGBREC USING DHH_ERR_FD,DHH_ERR_NAME,DHH_ERR_LIST
           CLEAR DHH_ERR_LIST
   ENDSWITCH
 REPEAT
 RETURN
. ----------------------------
. Operator pressed F9
. ----------------------------

QUIT
         IF (C_RMODE = "I")
            error     horz="23",vert="19":
                      bgcol=C_ERRB,fgcol=C_ERRF:
                      lncol=C_ERRL,shade="Y":
                      text=" Process Aborted by Operator ":
                      text="-----------------------------"
            messageerase
         ENDIF

         CLEAR     C_NOHIST

         TRAPREST  TRAP_DATA

         IF (RUN_MODE = "B")
            LOOP
               RETCOUNT  CURR_RETURN
               WHILE     (CURR_RETURN > ORIG_RETURN)
               NORETURN
            REPEAT
            MOVE      SCH_RTABRT  TO  SCH@RTCODE
            RETURN
         ENDIF
         CHAIN     "MENU"

INITIALIZE
         DISPLAY *P1:9,*ES
         CALL X_BLANK_SCREEN
         CLOCK     TIMESTAMP   INTO  TIMESTAMP
         CLOCK     TIMESTAMP   INTO  CURRDATE
         CLOCK     TIMESTAMP     TO  TODAY
. ...Display Counters
	 MOVE      "Input Recs Read:    " TO X_CNTDESC1
	 MOVE      "Recs Written  :    " TO X_CNTDESC2
	 CALL      X_DISPLAY_COUNTS
         RETURN
.
OPEN_FILES
         CALL      PREP_OGBFILE USING DHH_ERR_FD,DHH_ERR_NAME
         CALL      OPEN_OGBFILE USING DHH_FD,DHH_NAME
         CALL      PREP_OGBFILE USING U_DHH_FD,U_DHH_NAME
         RETURN

CLOSE_FILES
         CALL      CLOSE_OGBFILE USING DHH_ERR_FD,DHH_ERR_NAME
         CALL      CLOSE_OGBFILE USING DHH_FD,DHH_NAME
         CALL      CLOSE_OGBFILE USING U_DHH_FD,U_DHH_NAME
         RETURN

. ----------------------------
. Program Specific Includes
. ----------------------------

    INC       UTIL.SR      
    INC       VALID.IO
    INC       X_STANDARD.SR
    INC       FILE.IO
    INC       X_OGBFILE.IO

. +++++++++++++++++++++++++++++++++++++
. /End of A0606201.PS
. +++++++++++++++++++++++++++++++++++++
