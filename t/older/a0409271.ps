+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+    Program name   :  A0409271.PS
+    Description    :  Extracts file to update the deceased dates on the MEM
+                   :  file.    
+    Author         :  Lisa Spurlock 
+    Date created   :  09/27/2004
+    Project #      :  a0409271
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
.                          REVISIONS
.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
.--------------------------
. Required Program Includes
.--------------------------
    INC       COMMON.CB            ...Common work area
    INC       X_COMMON.CB          ...OGB Common work area
    INC       VALID.RL             ...Valid codes
    INC       X_OGBFILE.CB         ...OGB Custom File Handler



.--------------------------
. Program Specific Includes
.--------------------------
    INC       MEM.RL               ...Member demographic Record
    INC       MEME.RL           
    INC       MEMO.RL           
    INC       D_MEMMEM.CB          ...Member Import Layout

.------------------
. File Declarations
.------------------

.~~~~~~~~~~INPUT FILES
ACTENR_FILE       FILE      VAR=16,TEXT
ACTENR_NAME       INIT      "/ogb/work/elgdod.srt"  

ACTENR_LIST       LIST
ACTENR_KEY1       DIM       08
ACTENR_DOD        DIM       08
                  LISTEND

.~~~~~~~~~~OUTPUT FILES
OUTPUT_FILE       FILE      VAR=2300,TEXT
OUTPUT_NAME       INIT      "a0409271.out"
.OUTPUT_NAME       INIT      "/ogb/work/a0409271.out"


OUT_FILEX         FILE      VAR=35,TEXT
OUT_NAMEX         INIT      "/ogb/work/a0409271.txt"
OUT_FILE          IFILE     VAR=35,KEYL=8,TEXT
OUT_NAME          INIT      "/ogb/work/a0409271.ix1"

OUT_LIST     LIST
OUT_ID1           DIM       08
OUT_SSN           DIM       09
OUT_REL           DIM       02
OUT_DOD           DIM       08
OUT_TERM_DTE      DIM       08
             LISTEND

ERR_FILE          FILE      VAR=66,TEXT
ERR_NAME          INIT      "/ogb/work/a0409271.err"

ERR_LIST     LIST
ERR_ID1           DIM       08
ERR_DOD           DIM       08
ERR_REASON        DIM       50
             LISTEND

.--------------------------------------------
.Program Specific Variables & Working Storage
.--------------------------------------------
TIMESTAMP		DIM	14
CURRDATE      		DIM     08
PARAM_LIST    		LIST
PARAM_XXX     		DIM     10
PARAM_YYY     		DIM     05
PARAM_DATE    		DIM     08
              		LISTEND

VAL_RESULT              FORM     1
TRAP_DATA       	DIM      500
TODAY           	DIM      8
TODAY_CCYY           	DIM      4
TODAY_MM           	DIM      2
TODAY_DD           	DIM      2
CAL_CLOCK       	DIM      21
DISP4                   DIM      04
DISP3                   DIM      03
ENR                     INIT     "01"
BLANK8                  INIT     "        "
HLD_MEME_TRM            DIM      08  
HLD_REC                 DIM      1300
HLD_MEM_ESSN            DIM      09  
HLD_MEM_ID1             DIM      08  
HLD_MEM_REL             DIM      02  
HLD_MEM_ACCU            DIM      08  
FIRST_MEME_READ         DIM       1 
INP_RESULT              FORM      1 
IDX_RESULT              FORM      1 
MEM_RESULT              FORM      1 
COMPARE_DOD             DIM       8
MEM_DOD_CCYY            FORM      4
MEM_DOD_MM              FORM      2
MEM_DOD_DD              FORM      2
ORIG_RETURN     	FORM     5
CURR_RETURN     	FORM     5
TERM_DATE               DIM      8
SAVE_MEME_ID1           DIM      08

ENROLLEE_FOUND          DIM      01

ERROR_1        INIT     "MEMBER RECORD ID NOT FOUND.                       "
ERROR_2        INIT     "MEMBER CURRENTLY LISTED AS ACTIVE                 "
ERROR_3        INIT     "MEMBER LISTED AS ACTIVE AFTER THE DATE OF DEATH   "

TICKEY                  INIT     "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

PAT_KEY                 DIM       8         .>PAT. RECD ID  KEY      

.....> START HERE
         CALL      RUN_NOW
         CHAIN     C_NEXT 		    chains to the print program



.----------------------------------------
.   Start here if called by the Scheduler    
.----------------------------------------
         INC       SCHED_NP.SR              Scheduler routines (no printer)
RUN_NOW
         RETCOUNT  ORIG_RETURN



.---------------------
.   Fill top of screen
.---------------------
      MOVE      "MENU"                     TO    C_NEXT
      MOVE      "Update for the MEM_DOD"   TO    C_OPER
      MOVE      "A0409271"                 TO    C_PROG
      MOVE      BLANKS                     TO    C_LABEL
      MOVE      BLANKS                     TO    C_FILE
      MOVE      BLANKS                     TO    C_KEYS
      CLOCK     CALENDAR                   INTO  CAL_CLOCK
      CALL X_BLANK_SCREEN

. ----------------------
.   Set applicable traps
. ----------------------
      TRAPSAVE  TRAP_DATA
      TRAPCLR   ALL
      TRAP      QUIT   NORESET  IF F9

. ---------------------------
.   Get scheduler information
. ---------------------------
      CALL     SCHED_PICK
      IF (RUN_MODE = "B" OR RUN_MODE = "N")
         CALL MAIN_PROCESS
      ENDIF
      RETURN

.##############################################################################
MAIN_PROCESS
.##############################################################################

  CALL      INITIALIZE

  DEBUG
  CALL      OPEN_FILES
  DEBUG
  CALL      EXTRACT_OUTPUT_FILE    
  CALL      CLOSE_FILES
  CALL      NORMAL_EOJ
  TRAPREST  TRAP_DATA
  MOVE      SCH_RTSUCC  TO  SCH@RTCODE
  RETURN



.--------------------
. Operator pressed F9
. -------------------
QUIT
  IF (C_RMODE = "I")
      error horz="23",vert="19":
            bgcol=C_ERRB,fgcol=C_ERRF:
            lncol=C_ERRL,shade="Y":
            text=" Process Aborted by Operator ":
            text="-----------------------------"
      messageerase
  ENDIF
  CLEAR     C_NOHIST
  TRAPREST  TRAP_DATA
  IF (RUN_MODE = "B")
      LOOP
        RETCOUNT  CURR_RETURN
      WHILE     (CURR_RETURN > ORIG_RETURN)
      NORETURN
      REPEAT
      MOVE      SCH_RTABRT  TO  SCH@RTCODE
      RETURN
  ENDIF
  CHAIN     "MENU"

    

.##############################################################################
INITIALIZE
.##############################################################################
  CLOCK TIMESTAMP INTO TIMESTAMP
  CLOCK TIMESTAMP INTO CURRDATE
  CLOCK TIMESTAMP TO TODAY	

.---------------------
.   Fill top of screen
.---------------------
  MOVE      "MENU"                     TO    C_NEXT
  MOVE      "Update for the MEM_DOD"   TO    C_OPER
  MOVE      "A0409271"                 TO    C_PROG
  MOVE      BLANKS                     TO    C_LABEL
  MOVE      BLANKS                     TO    C_FILE
  MOVE      BLANKS                     TO    C_KEYS
  CLOCK     CALENDAR                   INTO  CAL_CLOCK
. CALL X_BLANK_SCREEN

  MOVE "Records Read: " TO X_CNTDESC1
  MOVE "Update Recs. written " TO X_CNTDESC2
  MOVE "                     " TO X_CNTDESC3
  MOVE "Error Records Found: " TO X_CNTDESC4
  MOVE "Records Processed:   " TO X_CNTDESC5
  MOVE "                     " TO X_CNTDESC6
  DISPLAY *ES

.------------------
...Display Counters
.------------------
  CALL X_DISPLAY_COUNTS

  UNPACK TODAY INTO TODAY_CCYY,TODAY_MM,TODAY_DD

 RETURN

.............................................................................

.##############################################################################
OPEN_FILES
.##############################################################################
    CALL OPEN_OGBFILE USING ACTENR_FILE,ACTENR_NAME
 
    CALL PREP_OGBFILE USING OUTPUT_FILE,OUTPUT_NAME

    CALL PREP_OGBFILE USING ERR_FILE,ERR_NAME

    CALL PREP_OGBFILE_IX USING OUT_FILE,OUT_NAME   

    CALL CLOSE_OGBFILE_IX USING OUT_FILE,OUT_NAME   

    CALL OPEN_OGBFILE_IX USING OUT_FILE,OUT_NAME   

  RETURN



.
.##############################################################################
EXTRACT_OUTPUT_FILE     
.##############################################################################
... Read the Input file (/w/elgdod.txt)

    LOOP
        MOVE OGB_SEQ1 TO OGB_SEQ
        CALL READ_OGBFILE USING ACTENR_FILE,ACTENR_NAME,ACTENR_LIST
        MOVE RESULT TO INP_RESULT
        IF (INP_RESULT <> 1)
            BREAK   
        ENDIF

        ADD 1 TO X_CNT1
        UNPACK X_CNT1 INTO DISP4,DISP3
        IF (DISP3 = "000")
            CALL X_DISPLAY_COUNTS
        ENDIF

... Routine to get DOD for 30 days later
        UNPACK ACTENR_DOD INTO MEM_DOD_CCYY,MEM_DOD_MM,MEM_DOD_DD
        IF (MEM_DOD_MM = 12)
            ADD 1 TO MEM_DOD_CCYY
            MOVE  "01" TO MEM_DOD_MM
            MOVE  "31" TO MEM_DOD_DD
            PACK COMPARE_DOD WITH MEM_DOD_CCYY,MEM_DOD_MM,MEM_DOD_DD
            REPLACE " 0" IN COMPARE_DOD
        ELSE 
            ADD 1 TO MEM_DOD_MM
            MOVE  "31" TO MEM_DOD_DD
            PACK COMPARE_DOD WITH MEM_DOD_CCYY,MEM_DOD_MM,MEM_DOD_DD
            REPLACE " 0" IN COMPARE_DOD
        ENDIF
           
 
... Read the MEM file for the Member 

        CLEAR     INM_REC
        CLEAR     ERR_REASON
        CLEAR     MEM_SAV
        PACK      MEM_FK11 WITH ACTENR_KEY1
        CALL      FILE_READ USING MEM_FD:    ...FILE DECLARATION LIST
                            MEM_FN:          ...FILE NAME LIST
                            MEM_FC:          ...(I)NDEX OR (A)IMDEX
                            MEM_FV:          ...FILE KEY VARLISTS
                            MEM_FK:          ...FILE KEY SIZES
                            MEM_LIST:        ...FILE RECORD (FIELD LIST)
                            MEM_REC:         ...FILE RECORD (PACKED)
                            MEM_OLD:         ...FILE SAVED WHEN READ
                            MEM_QTY:         ...NUMBER OF FILES
                            1                 ...FILE NUMBER FOR THIS READ


... If the Member is not found, the program writes to an error file
... and then continues to the next record to be read.

        MOVE RESULT TO MEM_RESULT
        IF (MEM_RESULT <> 1)
            MOVE ERROR_1 TO ERR_REASON
            CALL WRITE_ERROR_RECS 
            CONTINUE         
        ENDIF

        MOVE MEM_ID1 TO OUT_ID1
        MOVE MEM_ESSN TO OUT_SSN
        MOVE MEM_REL TO OUT_REL
        PACK MEM_SAV WITH MEM_REC

... Clearing the FIRST_MEME_READ Switch and Read the MEME record with the
... Member's Record ID

        MOVE " " TO FIRST_MEME_READ
        CLEAR TERM_DATE      
        CLEAR MEME_SAV
        PACK MEME_FK11 WITH MEM_ID1,BLANKS
 
        CALL FILE_READ USING MEME_FD:             ...FILE DECLARATION LIST
                             MEME_FN:             ...FILE NAME LIST
                             MEME_FC:             ...TYPE OF INDEX
.                                                 ...(I)NDEX or (A)IMDEX
                             MEME_FV:             ...FILE KEY VARLIST
                             MEME_FK:             ...FILE KEY SIZES
                             MEME_LIST:           ...FILE RECORD (FIELD LIST)
                             MEME_REC:            ...FILE RECORD (PACKED)
                             MEME_OLD:            ...FILE SAVED WHEN READ
                             MEME_QTY:            ...NUMBER OF FILES
                             1                    ...FILE NUMBER FOR THIS READ

        LOOP
            CALL FILE_NEXT USING MEME_FD:         ...FILE DECLARATION LIST
                                 MEME_FN:         ...FILE NAME LIST
                                 MEME_FC:         ...TYPE OF INDEX
.                                                 ...(I)NDEX or (A)IMDEX
                                 MEME_FV:         ...FILE KEY VARLIST
                                 MEME_FK:         ...FILE KEY SIZES
                                 MEME_LIST:       ...FILE RECORD (FIELD LIST)
                                 MEME_REC:        ...FILE RECORD (PACKED)
                                 MEME_OLD:        ...FILE SAVED WHEN READ
                                 MEME_QTY:        ...NUMBER OF FILES
                                 1                ...FILE NUMBER FOR THIS READ

... If NO MEME record is found, then it reads the next record.    

            IF (RESULT <> 1) 
                GOTO GET_MEM_RET
            ENDIF 

... If not equal and the FIRST_MEME_READ switch is blank then reads next record

            IF (MEM_ID1 <> MEME_ID1)
                IF (FIRST_MEME_READ = " ")
                    GOTO GET_MEM_RET
                ELSE 
                    BREAK 
                ENDIF
            ELSE
                MOVE "N" TO FIRST_MEME_READ
            ENDIF

... Excludes LIFE Plans              
            IF (SQUEEZE MEME_NET = "LIFE")
               CONTINUE
            ENDIF

... Excludes Blank Fields              
            IF (SQUEEZE MEME_NET = "") 
               CONTINUE
            ENDIF

            IF (MEME_TRM < COMPARE_DOD)
                IF (TERM_DATE < MEME_TRM)
                    PACK TERM_DATE WITH MEME_TRM
                    PACK MEME_SAV WITH MEME_REC
                ENDIF
            ENDIF

            IF (SQUEEZE MEME_TRM = "")
                PACK MEME_SAV WITH MEME_REC
                BREAK 
            ENDIF

            IF ((MEME_TRM >= TODAY) AND (MEME_EFF <= TODAY))
                PACK TERM_DATE WITH MEME_TRM
                PACK MEME_SAV WITH MEME_REC
            ENDIF

            IF ((MEME_TRM >= COMPARE_DOD) AND (MEME_EFF <= COMPARE_DOD))
                PACK TERM_DATE WITH MEME_TRM
                PACK MEME_SAV WITH MEME_REC
            ENDIF

        REPEAT

        UNPACK MEME_SAV INTO MEME_LIST

        IF (SQUEEZE MEME_TRM = "")
            MOVE ERROR_2 TO ERR_REASON
            CALL WRITE_ERROR_RECS 
        ENDIF

        IF (MEME_TRM > COMPARE_DOD)
            MOVE ERROR_3 TO ERR_REASON
            CALL WRITE_ERROR_RECS 
        ENDIF

        CALL WRITE_OUTPUT_RECS
 
        CALL WRITE_OUT_RECS
 
GET_MEM_RET  
  REPEAT
RETURN

.##############################################################################
WRITE_OUTPUT_RECS
.##############################################################################
.---------------
...Write records
.---------------

    CLEAR HLD_REC
    PACK HLD_REC WITH MEM_SAV
    UNPACK HLD_REC INTO INM_LIST
    CALL WRITE_OGBREC USING OUTPUT_FILE:
                            OUTPUT_NAME:
                            INM_LIST     

    PACK HLD_REC WITH MEM_SAV
    UNPACK HLD_REC INTO INM_LIST
    PACK INM_DOD          WITH ACTENR_DOD 
    PACK INM_LIFE         WITH "DECEAS"
    CALL WRITE_OGBREC USING OUTPUT_FILE:
                            OUTPUT_NAME:
                            INM_LIST     

    ADD 1 TO X_CNT2

WRITE_OUTPUT_RECS_RET
  RETURN

.##############################################################################
.
.******************************************************************************
WRITE_ERROR_RECS      
.******************************************************************************
 
    MOVE ACTENR_KEY1 TO ERR_ID1
    MOVE ACTENR_DOD  TO ERR_DOD

    MOVE OGB_SEQ1 TO OGB_SEQ
    CALL WRITE_OGBREC USING ERR_FILE:
                            ERR_NAME:
                            ERR_LIST

    ADD 1 TO X_CNT4

  RETURN
 
.
.******************************************************************************
WRITE_OUT_RECS      
.******************************************************************************
 
    MOVE ACTENR_DOD TO OUT_DOD
    MOVE MEME_TRM TO OUT_TERM_DTE

    MOVE OGB_SEQ1 TO OGB_SEQ
    CALL WRITE_OGBREC_IX USING OUT_FILE,OUT_NAME:
                               OUT_ID1,OUT_LIST  

    ADD 1 TO X_CNT5

  RETURN
 
.
.******************************************************************************
 
.##############################################################################
CLOSE_FILES
.############################################################################## 

  CALL CLOSE_OGBFILE USING OUTPUT_FILE,OUTPUT_NAME

  CALL CLOSE_OGBFILE USING ERR_FILE,ERR_NAME

  CALL CLOSE_OGBFILE_IX USING OUT_FILE,OUT_NAME

  RETURN
. -----------------------------------------------------

. ----------------------------
. Normal End-Of-Job Routine
. ----------------------------

NORMAL_EOJ

         MOVE      "        NEOJ        " TO X_FINISH_STATUS
         MOVE      "    A0409271  Completed   " TO X_PROG_FINISH
         CALL      X_END_OF_JOB

     RETURN

.------------------
. Required Includes
.------------------
  INC         UTIL.SR
  INC         VALID.IO
. INC         PRINT.SR
  INC         X_STANDARD.SR
  INC         FILE.IO

.--------------------------
. Program Specific Includes
.--------------------------
  INC        X_OGBFILE.IO
