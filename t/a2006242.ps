++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ NAME:
+   a2006242.ps
+
+ DESCRIPTION:
+   Fills out spans of MSP reporting for members erroneously changed
+   due to the upload of a 2015 MSP file instead of the 2020 file
+
+ CREATED BY:
+   apjwh - 2020-06-26
+
+ LAST MODIFIED BY:
+   apjwh - 2020-06-26
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

.# =================================================================== #
.# Variable Includes
.# =================================================================== #
    INC UTIL_COMMON.CB  ... OGB Common variables for UTIL routine
    INC ANA.RL
    INC MEM.RL
    INC MEMO.RL
    INC MEME.RL
    INC MSPA.RL
    INC VALID.RL

.# =================================================================== #
.# Scheduler Parameters
.# =================================================================== #

PARAM_LIST              LIST WITH NAMES
PARAM_TEST              CHAR    4
                        LISTEND

.# =================================================================== #
.# Equates for code clarity
.# =================================================================== #

V_FLAG                  EQU     1   ...0 or 1
V_DATE                  EQU     8   ...YYYYMMDD
MSG_HEIGHT              EQU     24
REFRESH_RATE            EQU     100

.# =================================================================== #
.# Configuration
.# =================================================================== #

.# =================================================================== #
.# Debugging Configuration
.# =================================================================== #

ENABLE_TEST             NUM     V_FLAG
TEST_CONFIG             LIST
TEST_THESE_IDS          INIT    "|00264462|":
                                "|00701163|":
                                "|00000705|":
                                "|00705347|": .needs a new ADD - 3/1/15 - onward
                                "|00030808|" .this one will be a delete, and needs a new ADD for 1/1/16 - 5/31/16
                        LISTEND

.# =================================================================== #
.# File Declarations
.# =================================================================== #

BADMSP_FD               FILE    VAR=MSPX_REC_SIZE,TEXT
BADMSP_FILE             INIT    "/w/a2006242_input.txt"

.# =================================================================== #
.# File lists
.# =================================================================== #

OUTPUT_FD               FILE    VAR=MSPX_REC_SIZE,TEXT
OUTPUT_FILE             INIT    "/w/a2006242_output.txt"

.# =================================================================== #
.# Program Variables
.# =================================================================== #

CURRDATE                CHAR    V_DATE
START_DATETIME          CHAR    24
END_DATETIME            CHAR    24

RUNDATE                 CHAR    V_DATE

OGB_TIN                 CHAR    9

HEALTH_MAX              EQU     100
HEALTH_RECS             CHAR    X_MEME_SIZE[HEALTH_MAX]
HEALTH_COUNT            NUM     3

ACTIVE_MAX              EQU     100
ACTIVE_SPANS            CHAR    50[ACTIVE_MAX]
ACTIVE_SPAN_COUNT       NUM     3

ACTIVE_SPAN_LIST        LIST
SPAN_EFF                CHAR    V_DATE
SPAN_TRM                CHAR    V_DATE
SPAN_LAST_ID            CHAR    8   1-8
SPAN_LAST_ID2           CHAR    4   9-12
SPAN_LAST_COV           CHAR    2   13-14
SPAN_NET                CHAR    5   15-19
SPAN_PRD                CHAR    5   20-24
SPAN_PLAN               CHAR    4   25-28
                        LISTEND

MSP_MAX                 EQU     20
MSP_RECS                CHAR    MSPX_REC_SIZE[MSP_MAX]
MSP_COUNT               NUM     7

DELETE_COUNTS           NUM     3

CURRENT_MEMBER          CHAR    8

.# =================================================================== #
.# Begin Program
.# =================================================================== #
.Manual and Autosys
    CALL RUN_NOW
    CHAIN C_NEXT    ...go to next program (usually the Menu)

.Impact Scheduler Hook
    INC SCHED_NP.SR     ...for jobs that don't use the print system


.#######################################################################
RUN_NOW ROUTINE
+ Configure runtime settings

.Save stack size at program start
    RETCOUNT ORIG_RETURN

.Set applicable traps
    TRAPSAVE TRAP_DATA
    TRAPCLR ALL
    TRAP QUIT NORESET IF F9

.Get run date
    CLOCK TIMESTAMP INTO CURRDATE

    MOVE "A2006242" TO C_PROG        ...Program name
    MOVE "Fix MSP History" TO C_OPER  ...Program description
    MOVE "MENU" TO C_NEXT
    MOVE "RUN_NOW" TO C_LABEL
    MOVE BLANKS TO C_FILE
    MOVE BLANKS TO C_KEYS

.Check if the program was called from the command line
    IF (C_CMDPAR)
        CALL CMD_START USING C_PROG
    ELSE
        CALL X_BLANK_SCREEN
    ENDIF

.Configure test options based on file mode. Default is Production
    CALL UTIL_SET_TESTMODE USING PARAM_TEST:  ...scheduler param
                                 ENABLE_TEST:  ...test toggle
                                 TEST_CONFIG  ...test settings list

.Set up run mode or build SCH record
    CALL SCHED_PICK

    SWITCH RUN_MODE
        CASE "N" | "B"
            CALL MAIN_PROCESS
        DEFAULT
    ENDSWITCH

    CALL NORMAL_EOJ

    RETURN
    ENDROUTINE


.#######################################################################
MAIN_PROCESS LROUTINE
+ Core logic
    debug
    CALL INITIALIZE
    CALL BUILD_MSP_HISTORY
    CALL CLEAN_UP

    RETURN
    ENDROUTINE


.#######################################################################
INITIALIZE LROUTINE
+ Setup runtime variables
    CLOCK TIMESTAMP TO CURRDATE
    CLOCK CALENDAR TO START_DATETIME

    MOVE "Input MSP Recs Proc'd " TO X_CNTDESC1
    MOVE "People Proc'd         " TO X_CNTDESC2
    MOVE "New MSP Records Added " TO X_CNTDESC3
    MOVE "Duplicates Removed    " TO X_CNTDESC4
    MOVE "                      " TO X_CNTDESC5
    MOVE "                      " TO X_CNTDESC6

    CALL X_ZERO_COUNTS
    IF (NOT C_CMDPAR)
        CALL X_DISPLAY_COUNTS
    ENDIF

    PACK RUNDATE WITH CURRDATE

    LOADMOD "UTIL_ASORT"

    CALL FIND_TAX_ID USING "OGB",OGB_TIN
    IF (CHOP OGB_TIN = "")
        debug
        CALL UTIL_ERRORMSG USING "Unable to find the OGB Tax Id"
    ENDIF

    RETURN
    ENDROUTINE


.#######################################################################
BUILD_MSP_HISTORY LROUTINE
+ Build MSP records for affected members from the 2015 data through
+ current
REC             NUM     7
PENDING_MSP     CHAR    MSPX_REC_SIZE
FILE_COMPLETE   NUM     V_FLAG
...
    CALL CLEAN_INPUT

    CALL UTIL_XMESSAGE USING "Building MSP Histories...",MSG_HEIGHT

    CALL OPEN_OGBFILE USING BADMSP_FD,BADMSP_FILE
    CALL PREP_OGBFILE USING OUTPUT_FD,OUTPUT_FILE

    CLEAR FILE_COMPLETE
    debug
    LOOP
        BREAK IF (FILE_COMPLETE & CHOP PENDING_MSP = "")

        CLEAR HEALTH_RECS,HEALTH_COUNT:
              ACTIVE_SPANS,ACTIVE_SPAN_COUNT:
              MSP_RECS,MSP_COUNT:
              CURRENT_MEMBER,DELETE_COUNTS

.Get all MSP records for the current member to start with
        MOVE OGB_SEQ1 TO OGB_SEQ
        LOOP
            IF (CHOP PENDING_MSP > "")
                UNPACK PENDING_MSP INTO MSPX_LIST
                CLEAR PENDING_MSP
            ELSE
                CALL READ_OGBFILE_SEQ USING BADMSP_FD,BADMSP_FILE,MSPX_LIST
                IF (RESULT != 1)
                    SET FILE_COMPLETE
                    BREAK
                ENDIF
                CONTINUE IF (CHOP MSPX_MEM = "") header or trailer
                CALL UTIL_XCOUNTER USING X_CNT1,REFRESH_RATE
            ENDIF

            IF (CHOP CURRENT_MEMBER = "" | CHOP CURRENT_MEMBER = CHOP MSPX_MEM)
                PACK CURRENT_MEMBER WITH MSPX_MEM
                CALL UTIL_SAFE_PACK_ARRAY_LIST USING MSPX_LIST,MSP_RECS,MSP_COUNT,MSP_MAX
                CONTINUE
            ENDIF

            PACK PENDING_MSP WITH MSPX_LIST .Save this record and process the current array
            BREAK
        REPEAT

        CALL UTIL_XCOUNTER USING X_CNT2,REFRESH_RATE

        debug
        CALL DBG_ON_ID USING CURRENT_MEMBER
        CALL BUILD_NEW_MSP_RECS USING CURRENT_MEMBER
        CALL WRITE_OUTPUT_RECS
    REPEAT

    CALL CLOSE_OGBFILE USING BADMSP_FD,BADMSP_FILE
    CALL CLOSE_OGBFILE USING OUTPUT_FD,OUTPUT_FILE

    MESSAGEERASE

    RETURN
    ENDROUTINE


.#######################################################################
FIND_BASE_MSP LROUTINE
+ For each MSP record from the input file, we need to process
REC         NUM     7
BASE_MSP    CHAR    MSPX_REC_SIZE
LAST_MSP    CHAR    MSPX_REC_SIZE
...
    CLEAR BASE_MSP,LAST_MSP

.Identify the MSP record we are using as our starting point.
    FOR REC FROM 1 TO MSP_COUNT
        IF (CHOP LAST_MSP > "")
            IF (CHOP LAST_MSP = CHOP MSP_RECS[REC])
                debug .remove duplicates
                FILL " " IN MSP_RECS[REC]
                CONTINUE
            ENDIF
        ENDIF

        UNPACK MSP_RECS[REC] INTO MSPX_LIST
        PACK LAST_MSP WITH MSPX_LIST

        IF (CHOP MSPX_TRXT = "1")  .deletes don't need changes or processing - just write them
            CONTINUE IF (CHOP BASE_MSP > "")
        ENDIF

        CALL NORMALIZE_MSP
        PACK BASE_MSP WITH MSPX_LIST
    REPEAT

    UNPACK BASE_MSP INTO MSPX_LIST

    RETURN
    ENDROUTINE


.#######################################################################
BUILD_NEW_MSP_RECS LROUTINE ID@
+ For each MSP record from the input file, we need to process
ID@         CHAR    @
...
    CALL UTIL_MEM_FIND USING ID@
    IF NOT EQUAL
        debug .what to do here?
        PACK MEM_ID1 WITH ID@
    ENDIF

    CALL DBG_ON_ID USING MEM_ID1

    CALL GET_ALL_HEALTH_PLANS   .gets the raw data we care about
    CALL BUILD_ACTIVE_SPANS     .builds the model we need for this program

    IF (MSP_COUNT > 1)
        debug .interesting case
    ENDIF

    CALL BUILD_MSP_SPANS

    RETURN
    ENDROUTINE


.#######################################################################
WRITE_OUTPUT_RECS LROUTINE
+ Add this member's MSP records to the output file
REC         NUM     7
THIS_MSP    CHAR    MSPX_REC_SIZE
LAST_MSP    CHAR    MSPX_REC_SIZE
...
    CLEAR LAST_MSP,THIS_MSP
    FOR REC FROM 1 TO MSP_COUNT
        CONTINUE IF (CHOP MSP_RECS[REC] = "") .a deleted record from the array

.Skip duplicates
        PACK THIS_MSP WITH MSPX_LIST
        IF (CHOP LAST_MSP > "")
            IF (LAST_MSP = THIS_MSP)
                debug
                CALL UTIL_XCOUNTER USING X_CNT4,REFRESH_RATE
                CONTINUE
            ENDIF
        ENDIF
        PACK LAST_MSP WITH THIS_MSP

        UNPACK MSP_RECS[REC] INTO MSPX_LIST

        CALL SET_DCN USING CURRENT_MEMBER
        CALL WRITE_MSP_OUTPUT USING OUTPUT_FD,OUTPUT_FILE
    REPEAT

    RETURN
    ENDROUTINE


.#######################################################################
CLEAN_INPUT LROUTINE
+ Make sure the input file is sorted by Id

    CALL UTIL_XMESSAGE USING "Sorting input file...",MSG_HEIGHT

    PACK SCRATCH WITH BADMSP_FILE," ",BADMSP_FILE," 29-36a 63-70a -t"
    SORT SCRATCH
    IF OVER
        debug
        CALL UTIL_ERRORMSG USING "Sort failed","CLEAN_INPUT"
    ENDIF

    MESSAGEERASE

    RETURN
    ENDROUTINE


.#######################################################################
NORMALIZE_MSP LROUTINE
+ Convert MSP data to OGB format

    IF (MSPX_TRM = "00000000")
        PACK MSPX_TRM WITH LAST_DATE
    ENDIF

    RETURN
    ENDROUTINE


.#######################################################################
BUILD_MSP_SPANS LROUTINE
+ Convert spans of active coverage into a MSP records
REC             NUM     7
MSP_REC         NUM     7
BUILD_NEW_MSP   NUM     V_FLAG
...
    IF (ACTIVE_SPAN_COUNT > 1)
        debug
    ENDIF

    CALL DBG_ON_ID USING MEM_ID1

    FOR REC FROM 1 TO ACTIVE_SPAN_COUNT
        UNPACK ACTIVE_SPANS[REC] INTO ACTIVE_SPAN_LIST

.See if we already have an MSP record for this span of time
        SET BUILD_NEW_MSP
        FOR MSP_REC FROM 1 TO MSP_COUNT
            UNPACK MSP_RECS[MSP_REC] INTO MSPX_LIST
            CONTINUE IF (CHOP MSPX_TRXT = "1") .ignore deletes

            CONTINUE IF (MSPX_TRM < SPAN_EFF)
            IF (MSPX_EFF = SPAN_EFF)
                CLEAR BUILD_NEW_MSP
                IF (MSPX_TRM != SPAN_TRM)
                    debug .update the term date
                    PACK MSPX_TRM WITH SPAN_TRM,BLANKS
                    PACK MSP_RECS[MSP_REC] WITH MSPX_LIST
                ENDIF
                BREAK
            ENDIF
        REPEAT
        CONTINUE IF NOT (BUILD_NEW_MSP)

.Process this span after the fixed record

        CALL UTIL_XCOUNTER USING X_CNT3,REFRESH_RATE

        CALL CMS_BUILD_NEW_MSP USING ACTIVE_SPANS[REC]
        CALL PACK_MSP_REC USING "ADD"

        CALL WRITE_LOG USING "New MSP record added"

        BREAK IF (SPAN_TRM = LAST_DATE)
    REPEAT

    RETURN
    ENDROUTINE


.#######################################################################
GET_ALL_HEALTH_PLANS LROUTINE
+ Get all health plans and sort into ascending date order

.We report on the plans that OGB covers claims for:
.   PPO:
.       OGB-PPO: 1/1/70 - 12/31/2012
.   EPO:
.       OGB: 1/1/70 - 6/30/05
.       United -> <done>
.   HMO:
.       Humana -> BCBS
.   all BCBS plans
.       HSA
.       HRA
.       Local/Plus
MEM_MAX             EQU     100
MEM_COUNT           NUM     7
PROCESSED_MEM_IDS   CHAR    1000
CURRENT_MEM         CHAR    X_MEM_SIZE
SEARCH_ID           CHAR    8
...
    CLEAR PROCESSED_MEM_IDS
    PACK CURRENT_MEM WITH MEM_LIST

    PACK SEARCH_ID WITH MEM_ID1

    FOR MEM_COUNT FROM 1 TO MEM_MAX
        CALL ADD_HEALTH_PLANS USING SEARCH_ID
        BREAK IF (CHOP MEM_ACCU = "")

        PACK PROCESSED_MEM_IDS WITH PROCESSED_MEM_IDS,"|",SEARCH_ID
        PACK SEARCH_ID WITH MEM_ACCU

        SCAN SEARCH_ID IN PROCESSED_MEM_IDS
        BREAK IF EQUAL

        CALL UTIL_MEM_FIND USING SEARCH_ID
        WHILE EQUAL
    REPEAT

.Sort our health records into date order
    IF (HEALTH_COUNT > 1)
        ASORT ATYPE="REC":
              ARRAY=HEALTH_RECS:
              AMAX=HEALTH_COUNT:
              SRTFLD1="96-103",SRTORD1="A":
              SRTFLD2="104-111",SRTORD2="D"
    ENDIF

    UNPACK CURRENT_MEM INTO MEM_LIST

    RETURN
    ENDROUTINE


.#######################################################################
ADD_HEALTH_PLANS LROUTINE ID@
+ Get all health plans for the given Id
ID@         CHAR    @
...
    CLEAR MEME_LIST
    LOOP
        IF (CHOP MEME_ID2 = "")
            CALL UTIL_MEME_FIND USING ID@,""
        ELSE
            CALL UTIL_MEME_NEXT
        ENDIF
        WHILE EQUAL

        IF (CHOP MEME_TRM = "")
            PACK MEME_TRM WITH LAST_DATE
        ENDIF

.This line is problematic. For the purposes of this process, we will assume
.the effective date sent on the original file should stand. However, the MSP
.spec indicate that the effective date should start at the beginning as an
.active person
        CONTINUE IF (CHOP MEME_TRM < MSPX_EFF)

.Skip the usual suspects of not-really-health lines
        CONTINUE IF (MEME_EFF > MEME_TRM)
        CONTINUE IF (SQUEEZE MEME_LEV2 = "95" & SQUEEZE MEME_MODE = "")
        CONTINUE IF (SQUEEZE MEME_LEV2 = "90" & SQUEEZE MEME_MODE != "")

.Skip COBRA
        CONTINUE IF (CHOP MEME_LEV1 = "5000")

.Skip extra billing records and other records we don't care about
        CALL IS_HEALTH_CLIP USING MEME_NET,MEME_PRD,MEME_PLAN
        CONTINUE IF OVER

        IF (CHOP MEME_NET = "DHH")
            debug .shouldn't hit this
            CONTINUE
        ENDIF

        CALL UTIL_SAFE_PACK_ARRAY_LIST USING MEME_LIST,HEALTH_RECS,HEALTH_COUNT,HEALTH_MAX
    REPEAT

    RETURN
    ENDROUTINE


.#######################################################################
BUILD_ACTIVE_SPANS LROUTINE
+ Build continuous health records as an Active Covered Individual into
+ spans of coverage. The effective date of the first span should be the
+ start of coverage under the GHP.
+
+ In this case it is floored to what was sent previously
REC             NUM     7
EARLIEST_EFF    CHAR    V_DATE
MSP_REC         NUM     7
...

.Get the earliest effective date on the current MSP records
    CLEAR EARLIEST_EFF
    FOR MSP_REC FROM 1 TO MSP_COUNT
        UNPACK MSP_RECS[MSP_REC] INTO MSPX_LIST
        IF (CHOP EARLIEST_EFF = "")
            PACK EARLIEST_EFF WITH MSPX_EFF
        ELSE
            CONTINUE IF (CHOP MSPX_TRXT = "1") .ignore deletes
            IF (CHOP MSPX_EFF < CHOP EARLIEST_EFF)
                PACK EARLIEST_EFF WITH MSPX_EFF
            ENDIF
        ENDIF
    REPEAT

.The MSP process' effective date is the start of a period of being an
.Active Covered Individual - it does not change to reflect the start of
.fields such as coverage level, RxBin, etc.
    CLEAR ACTIVE_SPAN_LIST

    FOR REC FROM 1 TO HEALTH_COUNT
        UNPACK HEALTH_RECS[REC] INTO MEME_LIST
        CONTINUE IF (CHOP MEME_TRM < CHOP EARLIEST_EFF)
        IF (CHOP MEME_EFF < CHOP EARLIEST_EFF)
            PACK MEME_EFF WITH EARLIEST_EFF
        ENDIF

        CALL IS_ACTIVE_GHP
        CONTINUE IF NOT EQUAL

        IF (CHOP SPAN_EFF = "")
            CALL PACK_SPAN_FIELDS USING MEME_EFF
            CONTINUE
        ENDIF

        CALL DATE_CALC USING SPAN_TRM,"ADD","DAYS",1,DATE_CCYYMMDD
        IF (MEME_EFF > DATE_CCYYMMDD)
            CALL UTIL_SAFE_PACK_ARRAY_LIST USING ACTIVE_SPAN_LIST,ACTIVE_SPANS,ACTIVE_SPAN_COUNT,ACTIVE_MAX

            CALL PACK_SPAN_FIELDS USING MEME_EFF
        ELSE
            IF (MEME_TRM > SPAN_TRM)
                CALL PACK_SPAN_FIELDS USING ""
            ENDIF
        ENDIF
    REPEAT

    IF (CHOP SPAN_EFF > "")
        CALL UTIL_SAFE_PACK_ARRAY_LIST USING ACTIVE_SPAN_LIST,ACTIVE_SPANS,ACTIVE_SPAN_COUNT,ACTIVE_MAX
        CLEAR ACTIVE_SPAN_LIST
    ENDIF

    RETURN
    ENDROUTINE


.#######################################################################
PACK_SPAN_FIELDS LROUTINE EFF@
+ Fill the span fields with MEME data
EFF@        CHAR    @
...
    IF (CHOP EFF@ > "")
        PACK SPAN_EFF WITH EFF@,BLANKS
    ENDIF
    PACK SPAN_TRM WITH MEME_TRM,BLANKS

    PACK SPAN_LAST_ID WITH MEME_ID1,BLANKS
    PACK SPAN_LAST_ID2 WITH MEME_ID2,BLANKS
    PACK SPAN_LAST_COV WITH MEME_DEPC,BLANKS
    PACK SPAN_NET WITH MEME_NET,BLANKS
    PACK SPAN_PRD WITH MEME_PRD,BLANKS
    PACK SPAN_PLAN WITH MEME_PLAN

    RETURN
    ENDROUTINE


.#######################################################################
IS_ACTIVE_GHP LROUTINE
+ Determine if this MEME records would qualify the member as an Active
+ Covered Individual

    CMATCH "9" IN MEME_LEV2
    IF (EQUAL)
        IF (CHOP MEME_LEV2 != "92")
            SETFLAG NOT EQUAL
            RETURN
        ENDIF
    ENDIF

    CMATCH "R" IN MEME_LEV1
    IF EQUAL
        SETFLAG NOT EQUAL
        RETURN
    ENDIF

.TODO: anthing else?

.TODO: This is how the current MSP process handles all of our plans. Is this
.correct? I feel like this should be responsive to dates, thus accounting for
.effective dates older than when BCBS became the HMO/PPO/etc contract holder
    IF (CHOP MEME_NET != "BLUE")
        SETFLAG NOT EQUAL
        RETURN
    ENDIF

    SETFLAG EQUAL

    RETURN
    ENDROUTINE


.#######################################################################
PACK_MSP_REC LROUTINE CHGTYPE@
+ Add the current MSP record to our array
CHGTYPE@        CHAR    @
...
    FILL " " IN MSPX_DCN
    CALL SET_MSP_TRANSACTION_CODE USING CHGTYPE@,MSPX_TRXT
    CALL UTIL_SAFE_PACK_ARRAY_LIST USING MSPX_LIST,MSP_RECS,MSP_COUNT,MSP_MAX
    RETURN
    ENDROUTINE


.#######################################################################
WRITE_LOG LROUTINE MSG@
+ Write to the log record
MSG@        CHAR    @

.TODO: write a log record

    RETURN
    ENDROUTINE


.#######################################################################
CLEAN_UP LROUTINE
+ Cleanup work files and handle output files
    CLOCK CALENDAR INTO END_DATETIME

.TODO: final clean up

    RETURN
    ENDROUTINE


.---------------------------------------------------------------------------
.TODO: add the below code to the routine include
.---------------------------------------------------------------------------

.#######################################################################
CMS_BUILD_NEW_MSP LROUTINE SPAN_DATA@
+ Flesh out the MSP data fields. Transaction set at write time. DCN and
+ transaction code are unset
SPAN_DATA@          CHAR    @
BENEFICIARY_MEM     CHAR    X_MEM_SIZE
PRIMARY_MEM         CHAR    X_MEM_SIZE
...
    FILL " " IN MSPX_LIST

    CLEAR BENEFICIARY_MEM,PRIMARY_MEM
    UNPACK SPAN_DATA@ INTO ACTIVE_SPAN_LIST

    CALL FIND_MEDICARE_ID USING SPAN_LAST_ID,MSPX_HICN

    CALL UTIL_MEM_FIND USING SPAN_LAST_ID
    IF NOT EQUAL
        debug
        CALL UTIL_ERRORMSG USING "Failed MEM read","CMS_BUILD_NEW_MSP"
    ENDIF
    PACK BENEFICIARY_MEM WITH MEM_LIST

.Set beneficiary demographics
    PACK MSPX_LNAM WITH MEM_LNAME,BLANKS
    PACK MSPX_FINI WITH MEM_FNAME,BLANKS
    PACK MSPX_DOB WITH MEM_DOB,BLANKS
    PACK MSPX_SSN WITH MEM_PSSN,BLANKS
    SWITCH MEM_SEX
    CASE "M"
        PACK MSPX_SEXC WITH "1"
    CASE "F"
        PACK MSPX_SEXC WITH "2"
    DEFAULT
        PACK MSPX_SEXC WITH "0"
    ENDSWITCH

    SWITCH MEM_REL
        CASE "01" | "02" | "03"
            PACK MSPX_RELC WITH MEM_REL,BLANKS
        DEFAULT
            PACK MSPX_RELC WITH "04",BLANKS
    ENDSWITCH

    PACK MSPX_IPOL WITH MEM_ESSN,BLANKS

.Set primary plan member details
    PACK MSPX_EMPS WITH MEM_ESSN
    IF (CHOP MEM_REL = "01")
        PACK MSPX_EMPF WITH MEM_FNAME,BLANKS
        PACK MSPX_EMPL WITH MEM_LNAME,BLANKS
    ELSE
        CLEAR MEM_AIM
        PACK MEM_AIM1 WITH "01X",MEM_ESSN,BLANKS
        PACK MEM_AIM3 WITH "03X01",BLANKS
        CALL UTIL_MEM_AIMFIND_REAL
        IF EQUAL
            PACK PRIMARY_MEM WITH MEM_LIST
            PACK MSPX_EMPF WITH MEM_FNAME,BLANKS
            PACK MSPX_EMPL WITH MEM_LNAME,BLANKS
        ENDIF
    ENDIF

.Note - this could be a 2 if the member has Medicare as primary during this
.period...
    PACK MSPX_STAT WITH "1",BLANKS


.Set plan details
    PACK MSPX_COVT WITH "W",BLANKS
.TODO: should the HRA be sent with a "R"?

    PACK MSPX_EFF WITH SPAN_EFF
    PACK MSPX_TRM WITH SPAN_TRM

    PACK MSPX_SIZE WITH "2",BLANKS
    PACK MSPX_GPOL WITH BLANKS

    IF (CHOP SPAN_LAST_COV = "" & CHOP PRIMARY_MEM > "")
        UNPACK PRIMARY_MEM INTO MEM_LIST
        CALL FIND_DEPC USING MEM_ID1,SPAN_TRM,SPAN_LAST_COV
    ENDIF

    SWITCH SPAN_LAST_COV
        CASE "EE"
            PACK MSPX_EMPC WITH "1"
        CASE "EC"
            PACK MSPX_EMPC WITH "3"
        CASE "ES" | "FM"
            PACK MSPX_EMPC WITH "2"
        DEFAULT
            FILL " " IN MSPX_EMPC
    ENDSWITCH

.Set PBM data
    PACK MSPX_RXID WITH MEM_ID1,BLANKS

    PACK MSPX_NPLN WITH BLANKS
    PACK MSPX_TFRE WITH BLANKS
    PACK MSPX_PERS WITH BLANKS

.Pharmacy Benefit BIN Number
    CALL SET_PBM_DATA USING SPAN_NET,SPAN_PRD,SPAN_PLAN

    CALL SET_TINS USING SPAN_NET

    RETURN
    ENDROUTINE


.#######################################################################
SET_PBM_DATA LROUTINE NET@,PRD@,PLAN@
+ Set PBM data per plan
NET@        CHAR    @
PRD@        CHAR    @
PLAN@       CHAR    @
NET         CHAR    10
PRD         CHAR    10
PLAN        CHAR    10
...
    PACK NET WITH (CHOP NET@)
    PACK PRD WITH (CHOP PRD@)
    PACK PLAN WITH (CHOP PLAN@)

.TODO: read this from a table
.TODO: restructure this out of nasty nested switches
    SWITCH NET
        CASE "BLUE"
            SWITCH PRD
                CASE "MAGNO" | "PELCN"
                    SWITCH PLAN
                        CASE "HSA"
                            PACK MSPX_PCN WITH EXP_SCP_PCN
                            PACK MSPX_BIN WITH EXP_SCP_BIN
                        DEFAULT
                            PACK MSPX_PCN WITH MED_IMP_PCN
                            PACK MSPX_BIN WITH MED_IMP_BIN
                    ENDSWITCH
                DEFAULT
                    debug

            ENDSWITCH
        DEFAULT
            debug
            PACK MSPX_PCN WITH BLANKS
            PACK MSPX_BIN WITH BLANKS
    ENDSWITCH

    RETURN
    ENDROUTINE


.#######################################################################
FIND_MEDICARE_ID LROUTINE ID@,MEDID@
+ Get the most recent Medicare Id.
ID@         CHAR    @
MEDID@      CHAR    @
CURR_EFF    CHAR    V_DATE
CURR_TRM    CHAR    V_DATE
...
    FILL " " IN MEDID@
    CLEAR MEMO_LIST,CURR_EFF,CURR_TRM

    LOOP
        IF (MEMO_ID2 = "")
            CALL UTIL_MEMO_FIND USING ID@,""
        ELSE
            CALL UTIL_MEMO_NEXT
        ENDIF
        WHILE EQUAL

        SWITCH MEMO_TYPE
            CASE "MEDA" | "MEDB"
            DEFAULT
                CONTINUE
        ENDSWITCH
        CONTINUE IF (CHOP MEMO_POL = "")

        IF (CHOP MEMO_EFF > "" & MEMO_EFF > CURR_EFF)
            PACK MEDID@ WITH MEMO_POL
            PACK CURR_EFF WITH MEMO_EFF
            PACK CURR_TRM WITH MEMO_TRM
        ELSE IF (CHOP MEMO_EFF1 > "")
            PACK MEDID@ WITH MEMO_POL
            PACK CURR_EFF WITH MEMO_EFF1
            PACK CURR_TRM WITH MEMO_TRM1
        ENDIF
        BREAK IF (CURR_TRM = "" & CHOP MEDID@ > "")
    REPEAT

    RETURN
    ENDROUTINE


.#######################################################################
SET_TINS LROUTINE NET@
+ Find the Tax Id fields
NET@        CHAR    @
...
.Set employer TIN to OGB
    PACK MSPX_ETIN WITH OGB_TIN,BLANKS

.Set carrier TIN
    CALL FIND_TAX_ID USING NET@,MSPX_ITIN
    IF (CHOP MSPX_ITIN = "")
        PACK MSPX_ITIN WITH OGB_TIN
    ENDIF

    RETURN
    ENDROUTINE


.#######################################################################
SET_DCN LROUTINE ID@
+ Generate a unique id for this record for this file
ID@                 CHAR    @
LAST_ID             CHAR    8
INTERNAL_COUNT      NUM     7
...
    CLEAR MSPX_DCN

    IF (CHOP ID@ != CHOP LAST_ID)
        CLEAR INTERNAL_COUNT
    ENDIF

    ADD 1 TO INTERNAL_COUNT

    IF (INTERNAL_COUNT > 1)
        debug
    ENDIF

    PACK MSPX_MEM WITH ID@,BLANKS
    PACK MSPX_JJJ WITH (CHAR INTERNAL_COUNT)
    REPLACE " 0" IN MSPX_JJJ

    PACK LAST_ID WITH ID@,BLANKS

    RETURN
    ENDROUTINE


.#######################################################################
WRITE_MSP_OUTPUT LROUTINE OUT_FD@,OUT_FILE@
+ Normalize data to MSP format and write it to a file
OUT_FD@         FILE    @
OUT_FILE@       CHAR    @
...

.Do some final data conversions
    IF (CHOP MSPX_TRM = "" | CHOP MSPX_TRM = LAST_DATE)
        FILL "0" IN MSPX_TRM
    ENDIF

    CALL WRITE_OGBREC_SEQ USING OUT_FD@,OUT_FILE@,MSPX_LIST

    RETURN
    ENDROUTINE


.#######################################################################
SET_MSP_TRANSACTION_CODE LROUTINE CHGTYPE@,CODE@
+ Convert action into MSP transaction code
CHGTYPE@        CHAR    @
CODE@           CHAR    @
...
    FILL " " IN CODE@
    SWITCH CHGTYPE@
        CASE "ADD"
            PACK CODE@ WITH "0",BLANKS
        CASE "DELETE"
            PACK CODE@ WITH "1",BLANKS
        CASE "UPDATE"
            PACK CODE@ WITH "2",BLANKS
        DEFAULT
            debug
            CALL UTIL_ERRORMSG USING ("Invalid CMS change type ["+CHGTYPE@+"]"),"WRITE_MSP"
    ENDSWITCH
    RETURN
    ENDROUTINE


.#######################################################################
FIND_TAX_ID LROUTINE KEY@,ID@
+ Serch the ANA file for a tax Id
KEY@        CHAR    @
ID@         CHAR    @
...
    FILL " " IN ID@
    CLEAR ANA_AIM1,ID@

    PACK ANA_AIM1 WITH "01X",KEY@,BLANKS
    CALL FILE_READ USING ANA_FD:      ...File Declaration List
                         ANA_FN:      ...File Name List
                         ANA_FC:      ...(I)ndex Or (A)imdex
                         ANA_FV:      ...File Key Varlists
                         ANA_AIM:     ...File Key Sizes
                         ANA_LIST:    ...File Record (Field List)
                         ANA_REC:     ...File Record (Packed)
                         ANA_OLD:     ...File Saved When Read
                         ANA_QTY:     ...Number Of Files
                         2            ...File Number For This Read
    IF (RESULT = 1)
        PACK ID@ WITH ANA_TAX,BLANKS
    ENDIF

    RETURN
    ENDROUTINE


.#######################################################################
FIND_DEPC LROUTINE WHO@,ASOF_DATE@,DEPC@
+ Find the coverage level code from the 01 for the given date
WHO@        CHAR    @
ASOF_DATE@  CHAR    @
DEPC@       CHAR    @
...
    FILL " " IN DEPC@
    CLEAR DEPC@

    CLEAR MEME_LIST
    LOOP
        IF (CHOP MEME_ID2 = "")
            CALL UTIL_MEME_FIND USING WHO@,""
        ELSE
            CALL UTIL_MEME_NEXT
        ENDIF
        WHILE EQUAL

        CONTINUE IF (CHOP MEME_EFF > CHOP ASOF_DATE@)
        CONTINUE IF (CHOP MEME_TRM > "" & CHOP MEME_TRM < CHOP ASOF_DATE@)

        CALL IS_HEALTH_CLIP USING MEME_NET,MEME_PRD,MEME_PLAN
        CONTINUE IF NOT OVER

        PACK DEPC@ WITH MEME_DEPC
        BREAK
    REPEAT

    RETURN
    ENDROUTINE


.#######################################################################
DBG_ON_ID LROUTINE ID@
+ Pause if this id is on the list of debug ids
ID@     CHAR    @
...
    RETURN IF (CHOP TEST_THESE_IDS = "")
    SCAN ID@ IN TEST_THESE_IDS
    IF (EQUAL)
        RESET TEST_THESE_IDS
        debug
    ENDIF

    RETURN
    ENDROUTINE


.# =================================================================== #
.# Subroutines Includes
.# =================================================================== #
    INC VALID.IO
    INC UTIL_COMMON.SR
    INC UTIL_TEST.SR
    INC UTIL_SYSTEM.SR
    INC UTIL_MEM.SR
    INC UTIL_MEME.SR
    INC UTIL_MEMO.SR
    INC UTIL_DATA.SR
    INC FILTER_NON_HEALTH.SR

.# =================================================================== #
.# End of Program
.# =================================================================== #
