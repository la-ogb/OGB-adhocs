+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+    Program name   :  A0807012.ps
+    aplap 07/02/2008 A0807012 - MEMBER DRUG HISTORY FOR WEB
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+------------------------------REVISIONS--------------------------------------+
+   aplap 07/10/2008 A0807012 is Adhoc made from program drg0150.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
. ----------------------------
. Required Program Includes
. ----------------------------

              INC       COMMON.CB            ...Common work area
              INC       X_COMMON.CB          ...OGB Common Work Area
              INC       VALID.RL             ...Valid codes
              INC       X_OGBFILE.CB         ...OGB Custom File Handler
              
. ----------------------------
. Program Specific Includes
. ----------------------------
              INC       MEM.RL           ...Member Demo         
              INC       MEME.RL          ...Member Enrollment   
. ----------------------------
. Input File
. ----------------------------
INP_ID_FD     FILE      VAR=8, TEXT
INP_ID_NAME   INIT      "/w/a0807021.txt"
INPUT_LIST    LIST
INP_ID        DIM       8
              LISTEND
. ----------------------------
. File Declarations
. ----------------------------
DRGHIST_FD       FILE     VAR=199,TEXT
DRGHIST_NAME     INIT     "/mcsora/non_impact_load/hist_web/drghist.txt"
.
DRGHIST_REC     DIM     199
.
DRGHIST_LIST    LIST
DRGHIST_ESSN    DIM     11             001-011
DRGHIST_ID      DIM     8              012-019
DRGHIST_LNAME   DIM     20             020-039
DRGHIST_FNAME   DIM     15             040-054
DRGHIST_MINIT   DIM     1              055-055
DRGHIST_DOB     DIM     10             056-065
DRGHIST_DRUG    DIM     30             066-095
DRGHIST_DS_1    DIM     4              096-099
DRGHIST_SF_1    DIM     10             100-109
DRGHIST_DS_2    DIM     4              110-113
DRGHIST_SF_2    DIM     10             114-123
DRGHIST_DS_3    DIM     4              124-127
DRGHIST_SF_3    DIM     10             128-137
DRGHIST_DS_4    DIM     4              138-141
DRGHIST_SF_4    DIM     10             142-151
DRGHIST_DS_5    DIM     4              152-155
DRGHIST_SF_5    DIM     10             156-165
DRGHIST_DS_6    DIM     4              166-169
DRGHIST_SF_6    DIM     10             170-179
DRGHIST_DATE_F  DIM     10             180-189
DRGHIST_DATE_T  DIM     10             190-199
                LISTEND
.
MEMX_WRK_FD     FILE     VAR=82,TEXT
MEMX_WRK_NAME   INIT    "/w/memx.a0807012.wrk"
MEMX_WRK_LIST   LIST
MEMX_WRK_ID     DIM     8
MEMX_WRK_ACCU   DIM     4
MEMX_WRK_ESSN   DIM     9
MEMX_WRK_SRC    DIM     1
MEMX_WRK_INC    DIM     8
MEMX_WRK_PD     DIM     8
MEMX_WRK_TCHG   DIM     10  
MEMX_WRK_DRUG   DIM     30
MEMX_WRK_DS     DIM     4
                LISTEND 
.
MEMX_WRK_FD_2   FILE     VAR=103,TEXT
MEMX_WRK_NAME_2 INIT    "/w/memx.a0807012.wrk2"
MEMX_WRK_LIST_2 LIST
MEMX_WRK_ESSN_2 DIM     9
MEMX_WRK_ID_2   DIM     8
MEMX_WRK_LNAME  DIM     20
MEMX_WRK_FNAME  DIM     15
MEMX_WRK_MINIT  DIM     1
MEMX_WRK_DOB    DIM     8
MEMX_WRK_DRUG_2 DIM     30
MEMX_WRK_INC_2  DIM     8
MEMX_WRK_DS_2   DIM     4
                LISTEND 
.
XREF_FD      IFILE    VAR=25,KEYL=8,TEXT,DUP
XREF_NAME    INIT     "/w/a0807012.xref.ix1"
XREF_LIST    LIST
XREF_F_ID     DIM     8
XREF_T_ID     DIM     8
XREF_T_ESSN   DIM     9
             LISTEND
XREF_KEY      DIM     8
.
LINK_FD         FILE    VAR=25,TEXT
LINK_NAME       INIT    "/w/a0807012.link"
LINK_LIST       LIST
LINK_ID         DIM     8
LINK_SSN        DIM     9
LINK_EFF        DIM     8
                LISTEND
. ----------------------------
. ----------------------------
. Program Specific Variables & Working Storage
. ------------------------
DRUG          INIT "DRUG"
.
SVE_ACCU      DIM  8
ACCU_ID1      DIM  8
LOOP_CNT      FORM 1
SVE_LINK_ID   DIM  8
SVE_LINK_SSN  DIM  9
MAIN_LOOP_ID  DIM  8
FORM4         FORM 4
MEMX_WRK_SRTKEY INIT "1-17 62-99 -T"   
DRGHIST_KEY     DIM 47
SVE_DRGHIST_KEY DIM 47
SERV_FROM     DIM  8        
PAID_THRU     DIM  8        
ZERO          FORM "      0.00"
CNT1_4        DIM  4
CNT1_3        DIM  3
CNT3_4        DIM  4
CNT3_3        DIM  3
CNT_4         DIM  4
CNT_3         DIM  3
FORM_72       FORM 7.2
W_CCYY        DIM  4
W_DIM3        DIM  3
W_DIM2        DIM  2
W_DIM4        DIM  4
FIRST_PAGE    DIM       1
FIRST_TIME    DIM       1
WORK_COUNT    DIM       8
FRONT         DIM       5
BACK          DIM       3
INC_DATE      DIM       8
DATE_CCYY     DIM       6
TIMESTAMP     DIM       14
CURRDATE      DIM       8
TRAP_DATA     DIM       500
CAL_CLOCK     DIM       21
ORIG_RETURN   FORM      5
CURR_RETURN   FORM      5
TODAY         DIM       8
PARAM_LIST    LIST
PARAM_XXX     DIM      10
PARAM_YYY     DIM       5
PARAM_DATE    DIM       6
              LISTEND

. ----------------------------
. Begin Program
. ----------------------------

. ----------------------------
. Start here if selected from menu   
. ----------------------------


         CALL      RUN_NOW

         CHAIN     C_NEXT

. ----------------------------
. Start here if called by the Scheduler    
. ----------------------------

         INC       SCHED_NP.SR              Scheduler routines (with printer)

RUN_NOW
. ...Check return stack
    RETCOUNT  ORIG_RETURN
. ----------------------------
. Fill top of screen
. ----------------------------

. ...Screen Display
         DISPLAY   *ES
         MOVE      "MENU"           TO  C_NEXT
         MOVE      "DRUG HIST EXT" TO  C_OPER
         MOVE      "A0807012"           TO  C_PROG
         MOVE      BLANKS              TO  C_LABEL
         MOVE      BLANKS              TO  C_FILE
         MOVE      BLANKS              TO  C_KEYS
         CLOCK     CALENDAR            INTO  CAL_CLOCK
         
         CALL X_BLANK_SCREEN

. ----------------------------
. Set Applicable Traps
. ----------------------------
         
. ...Set Applicable Traps
         TRAPSAVE  TRAP_DATA
         TRAPCLR   ALL
         TRAP      QUIT   NORESET  IF F9
	
. ----------------------------
. Get scheduler information
. ----------------------------

         CALL     SCHED_PICK

         IF (RUN_MODE = "B" OR RUN_MODE = "N")
            CALL      MAIN_PROCESS
         ENDIF
         RETURN

. ----------------------------
. Main Process
. ----------------------------

MAIN_PROCESS
   DEBUG
   CALL INITIALIZE
   CALL REFORMAT_MEMX
   CALL OPEN_FILES
   CALL CREATE_XREF
   CALL PROCESS_MEMX_WRK
   CALL CLOSE_OGBFILE USING MEMX_WRK_FD_2,MEMX_WRK_NAME_2
   DISPLAY *BOLDON,*BGCOLOR=*BLACK,*FGCOLOR=*WHITE:
           *P30:21,"SORTING FILE...",*BOLDOFF
   CALL SORT_OGBFILE USING MEMX_WRK_NAME_2,MEMX_WRK_NAME_2,MEMX_WRK_SRTKEY
   IF OVER
      ERROR     HORZ="15",VERT="19":
                BGCOL=C_ERRB,FGCOL=C_ERRF:
                LNCOL=C_ERRL,SHADE="Y":
                TEXT="SORT FAILED"
   ENDIF
   DISPLAY    *P30:21,*BGCOLOR=*CYAN,*EL
   CALL OPEN_OGBFILE USING MEMX_WRK_FD_2,MEMX_WRK_NAME_2
   MOVE OGB_SEQ1 TO OGB_SEQ
   CALL READ_OGBFILE USING MEMX_WRK_FD_2,MEMX_WRK_NAME_2:
                           MEMX_WRK_LIST_2
   PACK DRGHIST_KEY WITH MEMX_WRK_ESSN_2,MEMX_WRK_ID_2,MEMX_WRK_DRUG_2
   MOVE DRGHIST_KEY TO SVE_DRGHIST_KEY
   CALL WRITE_DRGHIST

....Close Files
   CALL      CLOSE_FILES 

.  CLEAR SCRATCH
.  PACK  SCRATCH WITH "chmod 666 /mcsora/non_impact_load/hist_web/drghist.txt"
.  ROLLOUT SCRATCH
.      IF OVER
.            ERROR  HORZ="15",VERT="19":
.                   BGCOL=C_ERRB,FGCOL=C_ERRF:
.                   LNCOL=C_ERRL,SHADE="Y":
.                   TEXT="chmod of drghist.txt FAILED"
.      CHAIN     "MENU"
.      ENDIF

   CALL      X_DISPLAY_COUNTS
   TRAPREST  TRAP_DATA
   MOVE      SCH_RTSUCC  TO  SCH@RTCODE
   RETURN                                                   
. ----------------------------
. End of Main Process
. ----------------------------
.
PROCESS_MEMX_WRK
   MOVE OGB_SEQ1 TO OGB_SEQ
   LOOP
      MOVE MEMX_WRK_NAME TO  C_FILE
      CALL READ_OGBFILE USING MEMX_WRK_FD,MEMX_WRK_NAME,MEMX_WRK_LIST
      IF (RESULT <> 1)
         BREAK 
      ENDIF
      ADD 1 TO X_CNT1
      UNPACK X_CNT1 INTO CNT1_4,CNT1_3
      IF (CNT1_3 = "000")
         CALL X_DISPLAY_COUNTS
      ENDIF
      CLEAR FORM_72
      MOVE MEMX_WRK_TCHG TO FORM_72
      IF (FORM_72 < ZERO)
         CONTINUE
      ENDIF
      MOVE XREF_NAME TO  C_FILE
      MOVE MEMX_WRK_ID TO XREF_KEY
      CALL READ_OGBFILE_IX USING XREF_FD,XREF_NAME:
                                 XREF_KEY,XREF_LIST
      IF (RESULT = 1)
         MOVE XREF_T_ID TO MEMX_WRK_ID
         MOVE XREF_T_ESSN TO MEMX_WRK_ESSN
      ENDIF
      PACK   MEM_FK11 WITH MEMX_WRK_ID
      CALL   FILE_READ USING MEM_FD:    ...File declaration list
               MEM_FN:   ...File name list
               MEM_FC:   ...(I)ndex or (A)imdex
               MEM_FV:   ...File key varlists
               MEM_FK:   ...File key sizes
               MEM_LIST: ...File record (field list)
               MEM_REC:  ...File record (packed)
               MEM_OLD:  ...File saved when read
               MEM_QTY:  ...Number of files
               1         ...File number for this read
      IF (RESULT = 1)
        MOVE MEM_LNAME TO MEMX_WRK_LNAME
        MOVE MEM_FNAME TO MEMX_WRK_FNAME
        MOVE MEM_MINIT TO MEMX_WRK_MINIT
        MOVE MEM_DOB TO MEMX_WRK_DOB
      ENDIF
      MOVE MEMX_WRK_ESSN TO MEMX_WRK_ESSN_2
      MOVE MEMX_WRK_ID TO MEMX_WRK_ID_2
      MOVE MEMX_WRK_DRUG TO MEMX_WRK_DRUG_2
      MOVE MEMX_WRK_INC TO MEMX_WRK_INC_2
      MOVE MEMX_WRK_DS TO MEMX_WRK_DS_2
      MOVE MEMX_WRK_NAME_2 TO  C_FILE
      CALL WRITE_OGBREC USING MEMX_WRK_FD_2,MEMX_WRK_NAME_2,MEMX_WRK_LIST_2
   REPEAT
   RETURN
.
WRITE_DRGHIST
   LOOP
     IF (RESULT <> 1)
        PACK DRGHIST_REC WITH DRGHIST_LIST
        IF (SQUEEZE DRGHIST_REC <> "")
          MOVE DRGHIST_NAME TO C_FILE
          MOVE OGB_SEQ1 TO OGB_SEQ
          CALL WRITE_OGBREC USING DRGHIST_FD,DRGHIST_NAME,DRGHIST_LIST
          CLEAR DRGHIST_LIST
          ADD 1 TO X_CNT3
          UNPACK X_CNT3 INTO CNT1_4,CNT1_3
          IF (CNT1_3 = "000")
             CALL X_DISPLAY_COUNTS
          ENDIF
          BREAK
        ELSE
          BREAK
        ENDIF
     ENDIF
     IF (DRGHIST_KEY <> SVE_DRGHIST_KEY)
         PACK DRGHIST_REC WITH DRGHIST_LIST
         IF (SQUEEZE DRGHIST_REC <> "")
           MOVE DRGHIST_NAME TO  C_FILE
           CALL WRITE_OGBREC USING DRGHIST_FD,DRGHIST_NAME,DRGHIST_LIST
           CLEAR DRGHIST_LIST
           ADD 1 TO X_CNT3
           UNPACK X_CNT3 INTO CNT1_4,CNT1_3
           IF (CNT1_3 = "000")
              CALL X_DISPLAY_COUNTS
           ENDIF
         ENDIF
         MOVE DRGHIST_KEY TO SVE_DRGHIST_KEY
     ENDIF
     IF ((SQUEEZE DRGHIST_DS_1 = "") AND (SQUEEZE DRGHIST_SF_1 = ""))
        UNPACK MEMX_WRK_ESSN_2 INTO W_DIM3,W_DIM2,W_DIM4
        PACK DRGHIST_ESSN WITH W_DIM3,"-",W_DIM2,"-",W_DIM4
        MOVE MEMX_WRK_ID_2 TO DRGHIST_ID
        MOVE MEMX_WRK_DRUG_2 TO DRGHIST_DRUG    
        CLEAR FORM4
        MOVE MEMX_WRK_DS_2 TO FORM4
        MOVE FORM4 TO DRGHIST_DS_1
        UNPACK MEMX_WRK_INC_2 INTO W_CCYY,W_MM,W_DD
        PACK DRGHIST_SF_1 WITH W_MM,"/",W_DD,"/",W_CCYY
        MOVE MEMX_WRK_LNAME TO DRGHIST_LNAME
        MOVE MEMX_WRK_FNAME TO DRGHIST_FNAME
        MOVE MEMX_WRK_MINIT TO DRGHIST_MINIT
        UNPACK MEMX_WRK_DOB INTO W_CCYY,W_MM,W_DD
        PACK DRGHIST_DOB WITH W_MM,"/",W_DD,"/",W_CCYY
        UNPACK SERV_FROM INTO W_CCYY,W_MM,W_DD
        PACK DRGHIST_DATE_F WITH W_MM,"/",W_DD,"/",W_CCYY
        UNPACK PAID_THRU INTO W_CCYY,W_MM,W_DD
        PACK DRGHIST_DATE_T WITH W_MM,"/",W_DD,"/",W_CCYY
     ELSE
       IF ((SQUEEZE DRGHIST_DS_2 = "") AND (SQUEEZE DRGHIST_SF_2 = ""))
          CLEAR FORM4
          MOVE MEMX_WRK_DS_2 TO FORM4
          MOVE FORM4 TO DRGHIST_DS_2
          UNPACK MEMX_WRK_INC_2 INTO W_CCYY,W_MM,W_DD
          PACK DRGHIST_SF_2 WITH W_MM,"/",W_DD,"/",W_CCYY
       ELSE
        IF ((SQUEEZE DRGHIST_DS_3 = "") AND (SQUEEZE DRGHIST_SF_3 = ""))
          CLEAR FORM4
          MOVE MEMX_WRK_DS_2 TO FORM4
          MOVE FORM4 TO DRGHIST_DS_3
          UNPACK MEMX_WRK_INC_2 INTO W_CCYY,W_MM,W_DD
          PACK DRGHIST_SF_3 WITH W_MM,"/",W_DD,"/",W_CCYY
        ELSE
         IF ((SQUEEZE DRGHIST_DS_4 = "") AND (SQUEEZE DRGHIST_SF_4 = ""))
           CLEAR FORM4
           MOVE MEMX_WRK_DS_2 TO FORM4
           MOVE FORM4 TO DRGHIST_DS_4
           UNPACK MEMX_WRK_INC_2 INTO W_CCYY,W_MM,W_DD
           PACK DRGHIST_SF_4 WITH W_MM,"/",W_DD,"/",W_CCYY
         ELSE     
           IF ((SQUEEZE DRGHIST_DS_5 = "") AND (SQUEEZE DRGHIST_SF_5 = ""))
             CLEAR FORM4
             MOVE MEMX_WRK_DS_2 TO FORM4
             MOVE FORM4 TO DRGHIST_DS_5
             UNPACK MEMX_WRK_INC_2 INTO W_CCYY,W_MM,W_DD
             PACK DRGHIST_SF_5 WITH W_MM,"/",W_DD,"/",W_CCYY
           ELSE
             CLEAR FORM4
             MOVE MEMX_WRK_DS_2 TO FORM4
             MOVE FORM4 TO DRGHIST_DS_6
             UNPACK MEMX_WRK_INC_2 INTO W_CCYY,W_MM,W_DD
             PACK DRGHIST_SF_6 WITH W_MM,"/",W_DD,"/",W_CCYY
             MOVE DRGHIST_NAME TO  C_FILE
             MOVE OGB_SEQ1 TO OGB_SEQ
             CALL WRITE_OGBREC USING DRGHIST_FD,DRGHIST_NAME,DRGHIST_LIST
             CLEAR DRGHIST_LIST
           ENDIF
         ENDIF
        ENDIF
       ENDIF
     ENDIF
     MOVE MEMX_WRK_NAME_2 TO  C_FILE
     MOVE OGB_SEQ1 TO OGB_SEQ
     CALL READ_OGBFILE USING MEMX_WRK_FD_2,MEMX_WRK_NAME_2,MEMX_WRK_LIST_2
     PACK DRGHIST_KEY WITH MEMX_WRK_ESSN_2,MEMX_WRK_ID_2,MEMX_WRK_DRUG_2
   REPEAT
   RETURN

REFORMAT_MEMX

 MOVE INP_ID_NAME TO C_FILE
 CALL OPEN_OGBFILE USING INP_ID_FD,INP_ID_NAME
 CALL PREP_OGBFILE USING MEMX_WRK_FD,MEMX_WRK_NAME
 CALL CLOSE_OGBFILE USING MEMX_WRK_FD,MEMX_WRK_NAME

 DISPLAY   *P1:21,*EL,*BOLDON, *BGCOLOR=*BLACK, *FGCOLOR=*WHITE:
           *P30:21, "REFORMATTING MEMX", *BOLDOFF
 LOOP
 MOVE OGB_SEQ1 TO OGB_SEQ
 CALL READ_OGBFILE USING INP_ID_FD,INP_ID_NAME,INPUT_LIST
 IF (RESULT <> 1)
    BREAK
 ENDIF

 CLEAR SCRATCH

 PACK SCRATCH WITH "memx.dbf"," ","/w/memx.a0807012.wrk":
 " -p1-8eq",INP_ID:
 " -p33-36eq",DRUG:
 " 1-8 33-36 45-53 86-86 101-108 117-124 160-169 205-234 281-284 -t -j -a"
 REFORMAT SCRATCH
     IF OVER
        ERROR     HORZ="22",VERT="20":
                  BGCOL=C_ERRB,FGCOL=C_ERRF:
                  LNCOL=C_ERRL,SHADE="Y":
                  TEXT="REFORMAT FAILED(MEMX.DBF)"
         CHAIN     "MENU"
     ENDIF
  REPEAT

. PACK SCRATCH WITH "memx.dbf"," ","/w/memx.a0807012.wrk":
. " -p33-36eq",DRUG:
. " -p101-108ge",SERV_FROM:
. " 1-8 33-36 45-53 86-86 101-108 117-124 160-169 205-234 281-284 -t -j -a"
. REFORMAT SCRATCH
.     IF OVER
.        ERROR     HORZ="22",VERT="20":
.                  BGCOL=C_ERRB,FGCOL=C_ERRF:
.                  LNCOL=C_ERRL,SHADE="Y":
.                  TEXT="REFORMAT FAILED(MEMX.DBF)"
.         CHAIN     "MENU"
.     ENDIF

...Sort to check reformat

 CALL SORT_OGBFILE USING MEMX_WRK_NAME,MEMX_WRK_NAME,MEMX_WRK_SRTKEY
   IF OVER
      ERROR     HORZ="15",VERT="19":
                BGCOL=C_ERRB,FGCOL=C_ERRF:
                LNCOL=C_ERRL,SHADE="Y":
                TEXT="SORT ID FAILED"
   ENDIF
 RETURN
.
CREATE_XREF
        PACK   MEM_FK11 WITH BLANKS   
        CALL   FILE_READ USING MEM_FD:    ...File declaration list
               MEM_FN:   ...File name list
               MEM_FC:   ...(I)ndex or (A)imdex
               MEM_FV:   ...File key varlists
               MEM_FK:   ...File key sizes
               MEM_LIST: ...File record (field list)
               MEM_REC:  ...File record (packed)
               MEM_OLD:  ...File saved when read
               MEM_QTY:  ...Number of files
               1         ...File number for this read
            LOOP
              CALL      FILE_NEXT USING MEM_FD:    ...File declaration list
                     MEM_FN:   ...File name list
                     MEM_FC:   ...(I)ndex or (A)imdex
                     MEM_FV:   ...File key varlists
                     MEM_FK:   ...File key sizes
                     MEM_LIST: ...File record (field list)
                     MEM_REC:  ...File record (packed)
                     MEM_OLD:  ...File saved when read
                     MEM_QTY:  ...Number of files
                     1         ...File number for this read
              BREAK IF (RESULT <> 1)
              ADD 1 TO X_CNT2
              UNPACK X_CNT2 INTO CNT1_4,CNT1_3
              IF (CNT1_3 = "000")
                  CALL X_DISPLAY_COUNTS
              ENDIF
              MOVE MEM_ID1 TO MAIN_LOOP_ID
              IF (SQUEEZE MEM_ACCU = "")
                 CONTINUE
              ENDIF
              CALL PREP_OGBFILE USING LINK_FD,LINK_NAME 
              MOVE MEM_ID1 TO ACCU_ID1
              MOVE MEM_ID1 TO SVE_ACCU
              MOVE 1 TO LOOP_CNT
              CALL GET_LINKED_HISTORY
              CALL CLOSE_OGBFILE USING LINK_FD,LINK_NAME: 
                                       LINK_LIST 
              PACK SCRATCH WITH LINK_NAME," ",LINK_NAME," 18-25 -t -r"
              SORT      SCRATCH
                 IF OVER
                   ERROR     HORZ="22",VERT="20":
                             BGCOL=C_ERRB,FGCOL=C_ERRF:
                             LNCOL=C_ERRL,SHADE="Y":
                             TEXT="SORT FAILED(test.link)"     
                             CHAIN     "MENU"
                 ENDIF
              CALL OPEN_OGBFILE USING LINK_FD,LINK_NAME 
              MOVE OGB_SEQ1 TO OGB_SEQ
              CALL READ_OGBFILE USING LINK_FD,LINK_NAME,LINK_LIST
              IF (RESULT <> 1)
                CALL REPO_MEM
                CONTINUE
              ENDIF
              IF (MAIN_LOOP_ID <> LINK_ID) 
                 CALL REPO_MEM
                 CONTINUE
              ELSE
                 MOVE LINK_ID TO SVE_LINK_ID
                 MOVE LINK_SSN TO SVE_LINK_SSN
                 CALL WRITE_XREF
                 CALL REPO_MEM
                 CONTINUE
              ENDIF
            REPEAT
            RETURN

REPO_MEM
    PACK MEM_FK11 WITH MAIN_LOOP_ID
    CALL FILE_READ USING MEM_FD:             ...FILE DECLARATION LIST
                         MEM_FN:             ...FILE NAME LIST
                         MEM_FC:             ...TYPE OF INDEX
.                                             ...(I)NDEX or (A)IMDEX
                         MEM_FV:             ...FILE KEY VARLIST
                         MEM_FK:             ...FILE KEY SIZES
                         MEM_LIST:           ...FILE RECORD (FIELD LIST)
                         MEM_REC:            ...FILE RECORD (PACKED)
                         MEM_OLD:            ...FILE SAVED WHEN READ
                         MEM_QTY:            ...NUMBER OF FILES
                         1                    ...FILE NUMBER FOR THIS READ
   RETURN


GET_LINKED_HISTORY
 LOOP
    IF (LOOP_CNT <> 1)
      IF (ACCU_ID1 = SVE_ACCU)
         BREAK
      ENDIF
    ENDIF
    IF (SQUEEZE ACCU_ID1 = "")
       BREAK
    ENDIF  
    IF (LOOP_CNT > 7)
       BREAK
    ENDIF
    PACK MEM_FK11 WITH ACCU_ID1
    CALL FILE_READ USING MEM_FD:             ...FILE DECLARATION LIST
                         MEM_FN:             ...FILE NAME LIST
                         MEM_FC:             ...TYPE OF INDEX
.                                             ...(I)NDEX or (A)IMDEX
                         MEM_FV:             ...FILE KEY VARLIST
                         MEM_FK:             ...FILE KEY SIZES
                         MEM_LIST:           ...FILE RECORD (FIELD LIST)
                         MEM_REC:            ...FILE RECORD (PACKED)
                         MEM_OLD:            ...FILE SAVED WHEN READ
                         MEM_QTY:            ...NUMBER OF FILES
                         1                    ...FILE NUMBER FOR THIS READ
    IF (RESULT <> 1)
          ERROR     HORZ="22",VERT="20":
                    BGCOL=C_ERRB,FGCOL=C_ERRF:
                    LNCOL=C_ERRL,SHADE="Y":
                    TEXT="READ FAILED(MEM-2)"     
                    CHAIN     "MENU"
    ENDIF
    ADD 1 TO LOOP_CNT
    MOVE MEM_ACCU TO ACCU_ID1
    PACK MEME_FK11 WITH MEM_ID1,BLANKS
    CALL  FILE_READ USING MEME_FD:  ...FILE DECLARATION LIST
        	           MEME_FN:  ...FILE NAME LIST  
		           MEME_FC:  ...TYPE OF INDEX   
.	  		             ...(I)NDEX OR (A)IMDEX
		           MEME_FV:  ...FILE KEY VARLISTS
		           MEME_FK:  ...FILE KEY SIZES  
		           MEME_LIST:...FILE RECORD (FIELD LIST)
		           MEME_REC: ...FILE RECORD (PACKED)
		           MEME_OLD: ...FILE SAVED WHEN READ
		           MEME_QTY: ...NUMBER OF FILES 
			   1	     ...FILE NUMBER FOR THIS READ
             LOOP
                CALL  FILE_NEXT USING MEME_FD:  ...FILE DECLARATION LIST
  	          	           MEME_FN:  ...FILE NAME LIST  
		                   MEME_FC:  ...TYPE OF INDEX   
.	  		                     ...(I)NDEX OR (A)IMDEX
		                   MEME_FV:  ...FILE KEY VARLISTS
		                   MEME_FK:  ...FILE KEY SIZES  
		                   MEME_LIST:...FILE RECORD (FIELD LIST)
		                   MEME_REC: ...FILE RECORD (PACKED)
		                   MEME_OLD: ...FILE SAVED WHEN READ
		                   MEME_QTY: ...NUMBER OF FILES 
			           1	     ...FILE NUMBER FOR THIS READ
                IF ((MEM_ID1 <> MEME_ID1) OR (RESULT <> 1))
                   BREAK
                ENDIF
                IF (SQUEEZE MEME_NET = "LIFE")
                    CONTINUE
                ENDIF
                IF (SQUEEZE MEME_TRM = "")
                    MOVE "99999999" TO MEME_TRM
                ENDIF               
                IF (MEME_TRM < MEME_EFF)
                    CONTINUE
                ENDIF
                MOVE MEME_ID1 TO LINK_ID
                MOVE MEM_ESSN TO LINK_SSN
                MOVE MEME_EFF TO LINK_EFF
                MOVE OGB_SEQ1 TO OGB_SEQ
                CALL WRITE_OGBREC USING LINK_FD,LINK_NAME,LINK_LIST
             REPEAT 
 REPEAT
 RETURN
.
WRITE_XREF
    LOOP
       MOVE OGB_SEQ1 TO OGB_SEQ
       CALL READ_OGBFILE USING LINK_FD,LINK_NAME,LINK_LIST
       IF (RESULT <> 1)
          BREAK    
       ENDIF
       IF (LINK_ID = SVE_LINK_ID)
          CONTINUE
       ENDIF
       MOVE LINK_ID TO XREF_F_ID
       MOVE SVE_LINK_ID TO XREF_T_ID
       MOVE SVE_LINK_SSN TO XREF_T_ESSN
       MOVE XREF_F_ID TO XREF_KEY
       CALL WRITE_OGBREC_IX USING XREF_FD,XREF_NAME,XREF_KEY,XREF_LIST
       CONTINUE
    REPEAT
    RETURN
.
. ----------------------------
. Operator pressed F9
. ----------------------------

QUIT
         IF (C_RMODE = "I")
            error     horz="23",vert="19":
                      bgcol=C_ERRB,fgcol=C_ERRF:
                      lncol=C_ERRL,shade="Y":
                      text=" Process Aborted by Operator ":
                      text="-----------------------------"
            messageerase
         ENDIF

         CLEAR     C_NOHIST

         TRAPREST  TRAP_DATA

         IF (RUN_MODE = "B")
            LOOP
               RETCOUNT  CURR_RETURN
               WHILE     (CURR_RETURN > ORIG_RETURN)
               NORETURN
            REPEAT
            MOVE      SCH_RTABRT  TO  SCH@RTCODE
            RETURN
         ENDIF
         CHAIN     "MENU"

INITIALIZE
         DISPLAY *P1:9,*ES
         CALL X_BLANK_SCREEN
         CLOCK     TIMESTAMP   INTO  TIMESTAMP
         CLOCK     TIMESTAMP   INTO  CURRDATE
         CLOCK     TIMESTAMP     TO  TODAY

. ...Display Counters
	 MOVE      "MEMX Recs Read:    " TO X_CNTDESC1
	 MOVE      "MEM  Recs Read:    " TO X_CNTDESC2
	 MOVE      "Recs Written  :    " TO X_CNTDESC3

	 CALL      X_DISPLAY_COUNTS

         CALL DATE_CALC USING TODAY,"SUB","YEARS",2,SERV_FROM   
         MOVE TODAY TO PAID_THRU
         
         RETURN
.
OPEN_FILES
         CALL      PREP_OGBFILE USING DRGHIST_FD,DRGHIST_NAME
         CALL      OPEN_OGBFILE USING MEMX_WRK_FD,MEMX_WRK_NAME
         CALL      PREP_OGBFILE USING MEMX_WRK_FD_2,MEMX_WRK_NAME_2
         CALL      PREP_OGBFILE_IX USING XREF_FD,XREF_NAME    
         RETURN

CLOSE_FILES
         CALL      CLOSE_OGBFILE USING DRGHIST_FD,DRGHIST_NAME
         CALL      CLOSE_OGBFILE USING MEMX_WRK_FD,MEMX_WRK_NAME
         CALL      CLOSE_OGBFILE_IX USING XREF_FD,XREF_NAME    
         CALL      CLOSE_OGBFILE USING MEMX_WRK_FD_2,MEMX_WRK_NAME_2
         RETURN

    INC       UTIL.SR      
    INC       VALID.IO
    INC       X_STANDARD.SR
    INC       FILE.IO

. ----------------------------
. Program Specific Includes
. ----------------------------

              INC       X_OGBFILE.IO

. +++++++++++++++++++++++++++++++++++++
. /End of A0807012.PS
. +++++++++++++++++++++++++++++++++++++
