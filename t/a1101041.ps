.     *********************************************************************
.     *             STATE EMPLOYEES GROUP BENEFITS PROGRAM                *
.     *********************************************************************
.     *                                                                   *
.     * PROGRAM NAME: a1101041                                            *
.     *                                                                   *
.     * DESCRIPTION: Creates new elgibility history lines for enrollees   * 
.     *              whose coverage levels have changed due to dep terms  *
.     *                                                                   *
.     * PROGRAM NOTES AND REVISIONS:                                      *
.     *                                                                   *
.     * apsjm a1101041 01/04/2011 - Incresed size of d_memmem to 4100.
.     * apazw 06/12/2017 - mod - increased file size
.     *********************************************************************
. ----------------------------
. Required Program Includes
. ----------------------------

              INC       COMMON.CB            ...Common work area
              INC       X_COMMON.CB          ...OGB Common Work Area
              INC       VALID.RL             ...Valid codes
              INC       X_OGBFILE.CB         ...OGB Custom File Handler
              
. ----------------------------
. Program Specific Includes
. ----------------------------
              INC       MEM.RL           ...Member Demographics 
              INC       D_MEMMEM.CB      ...Eligibility load
              INC       MEME.RL          ...Member Enrolllment
              INC       MEMF.RL          ...Member Flex
              INC       CLI.RL           ...Client Demographics
. ----------------------------
. File Declarations
. ----------------------------
.
DEP_TERM_FD   FILE      VAR=37,TEXT
DEP_TERM_NAME INIT      "/w/a1101041.txt"
DEP_TERM_LIST LIST
DEP_TERM_ID1  DIM       8
DEP_TERM_ESSN DIM       9
DEP_TERM_ID2  DIM       4
DEP_TERM_DTE  DIM       8
DEP_TERM_NET  DIM       5
DEP_TERM_SC   DIM       3
              LISTEND
DEP_TERM_SAV  DIM       37
.
DEP_TERM_WRK_FD   FILE      VAR=37,TEXT
DEP_TERM_WRK_NAME INIT      "/w/a1101041.wrk"
DEP_TERM_WRK_FD_I IFILE      VAR=37,TEXT,KEYL=9,DUP
DEP_TERM_WRK_NAME_I INIT    "/w/a1101041.ix1"
DEP_TERM_WRK_IDX      INIT      "9-17 -D"
DEP_TERM_WRK_KEY  DIM       9
.
.
U_COVL_FD     FILE     VAR=X_INM_SIZE,TEXT
U_COVL_NAME   INIT    "chgcov.txt"
.
FLEX_LTR_FD      FILE    VAR=24,TEXT
FLEX_LTR_NAME    INIT    "lchg_flx.txt"
FLEX_LTR_LIST    LIST
FLEX_LTR_MID1    DIM    8
FLEX_LTR_CID1    DIM    8
FLEX_LTR_DID1    DIM    8
                 LISTEND
. ----------------------------
. ----------------------------
. ----------------------------
. Program Specific Variables & Working Storage
. ------------------------
THISYR_DOB    DIM       8
NEW_DATE      DIM       8
AGE           DIM       3
WRK_YYYY      DIM       4
DOBMM         DIM       2
DOBYYYY       DIM       4
DOBDD         DIM       2
W_DIM1        DIM  1
W_AGY         DIM  4
MEME_SAV3     DIM  600
O_TRM         DIM  8
FUT_COVL      DIM  2
E_EFF         DIM  8
W_MEME_SAV1   DIM  600
W_MEME_SAV2   DIM  600
W_MEME_SAV3   DIM  600 
W_MEME_SAV4   DIM  600
W_MEME_SAV5   DIM  600
SAVE_MEM_ID1  DIM  8
WRK_DATE      DIM  8
WRK_DATE_2    DIM  8
SAVE_DEPC     DIM  2
CLD_SW        DIM  1
SP_SW         DIM  1
LIFE          INIT "LIFE "
FIRST_READ    DIM  1
CNT1_4        DIM  4
CNT1_3        DIM  3
CNT3_4        DIM  4
CNT3_3        DIM  3
CNT_4         DIM  4
CNT_3         DIM  3
FIRST_TIME    DIM       1
WORK_COUNT    DIM       8
FRONT         DIM       5
BACK          DIM       3
TIMESTAMP     DIM       14
CURRDATE      DIM       8
TRAP_DATA     DIM       500
CAL_CLOCK     DIM       21
ORIG_RETURN   FORM      5
CURR_RETURN   FORM      5
TODAY         DIM       8
PARAM_LIST    LIST
PARAM_XXX     DIM      10
PARAM_YYY     DIM       5
PARAM_DATE    DIM       8
              LISTEND

. ----------------------------
. Begin Program
. ----------------------------

. ----------------------------
. Start here if selected from menu   
. ----------------------------


         CALL      RUN_NOW

         CHAIN     C_NEXT

. ----------------------------
. Start here if called by the Scheduler    
. ----------------------------

         INC       SCHED_NP.SR              Scheduler routines (w/o printer)

RUN_NOW
. ...Check return stack
    RETCOUNT  ORIG_RETURN
. ----------------------------
. Fill top of screen
. ----------------------------

. ...Screen Display
         DISPLAY   *ES
         MOVE      "A1101041"        TO  C_PROG
         MOVE      "CHG COV LVL"        TO  C_OPER
         MOVE      BLANKS              TO  C_LABEL
         MOVE      BLANKS              TO  C_FILE
         MOVE      BLANKS              TO  C_KEYS
         CLOCK     CALENDAR            INTO  CAL_CLOCK
         
         CALL X_BLANK_SCREEN

. ----------------------------
. Set Applicable Traps
. ----------------------------
         
. ...Set Applicable Traps
         TRAPSAVE  TRAP_DATA
         TRAPCLR   ALL
         TRAP      QUIT   NORESET  IF F9
	
. ----------------------------
. Get scheduler information
. ----------------------------

         CALL     SCHED_PICK

         IF (RUN_MODE = "B" OR RUN_MODE = "N")
            CALL      MAIN_PROCESS
         ENDIF
         RETURN

. ----------------------------
. Main Process
. ----------------------------

MAIN_PROCESS
   DEBUG
   CALL REFORMAT_FILES
   CALL INITIALIZE
   CALL OPEN_FILES
   CALL PROCESS_WRK
....Close Files
   CALL      CLOSE_FILES 
   CALL      X_DISPLAY_COUNTS
   TRAPREST  TRAP_DATA
   MOVE      SCH_RTSUCC  TO  SCH@RTCODE
   MOVE      "MENU"        TO C_NEXT
   RETURN                                                   
. ----------------------------
. End of Main Process
. ----------------------------
PROCESS_WRK
    MOVE OGB_SEQ1 TO OGB_SEQ
 LOOP
    CALL READ_OGBFILE USING DEP_TERM_FD,DEP_TERM_NAME,DEP_TERM_LIST
    IF (RESULT <> 1)
        BREAK
    ENDIF
    ADD 1 TO X_CNT1
    UNPACK X_CNT1 INTO CNT1_4,CNT1_3
    CALL X_DISPLAY_COUNTS
.------------------------         
...Get info from MEM-FILE
.------------------------
    CLEAR     MEM_AIM
    PACK      MEM_AIM1 WITH "01X",DEP_TERM_ESSN,BLANKS
    PACK      MEM_AIM3 WITH "03X","01",BLANKS
    CALL      FILE_READ USING MEM_FD:    ...FILE DECLARATION LIST
                            MEM_FN:          ...FILE NAME LIST
                            MEM_FC:          ...(I)NDEX OR (A)IMDEX
                            MEM_FV:          ...FILE KEY VARLISTS
                            MEM_AIM:          ...FILE KEY SIZES
                            MEM_LIST:        ...FILE RECORD (FIELD LIST)
                            MEM_REC:         ...FILE RECORD (PACKED)
                            MEM_OLD:         ...FILE SAVED WHEN READ
                            MEM_QTY:         ...NUMBER OF FILES
                            2                 ...FILE NUMBER FOR THIS READ
    IF (RESULT <> 1)
       CONTINUE
    ENDIF
         DISPLAY *P1:9,DEP_TERM_ID1
    MOVE MEM_ID1 TO SAVE_MEM_ID1
    PACK MEM_SAV WITH MEM_LIST
    CALL DATE_CALC USING DEP_TERM_DTE,"ADD","DAYS",1,WRK_DATE
    CLEAR E_EFF
    CLEAR W_MEME_SAV1
    CLEAR W_MEME_SAV2
    CLEAR W_MEME_SAV3
    CLEAR W_MEME_SAV4
    CLEAR W_MEME_SAV5
    CLEAR O_TRM
    CLEAR MEME_SAV 
    CLEAR MEME_SAV2
    CLEAR MEME_SAV3
    CLEAR SAVE_DEPC
    PACK MEME_FK11 WITH MEM_ID1,BLANKS
    CALL  FILE_READ USING MEME_FD:  ...FILE DECLARATION LIST
        	           MEME_FN:  ...FILE NAME LIST  
	                   MEME_FC:  ...TYPE OF INDEX   
.	  		             ...(I)NDEX OR (A)IMDEX
		           MEME_FV:  ...FILE KEY VARLISTS
		           MEME_FK:  ...FILE KEY SIZES  
		           MEME_LIST:...FILE RECORD (FIELD LIST)
		           MEME_REC: ...FILE RECORD (PACKED)
		           MEME_OLD: ...FILE SAVED WHEN READ
		           MEME_QTY: ...NUMBER OF FILES 
			   1	     ...FILE NUMBER FOR THIS READ
         LOOP
                CALL  FILE_NEXT USING MEME_FD:  ...FILE DECLARATION LIST
  	          	           MEME_FN:  ...FILE NAME LIST  
		                   MEME_FC:  ...TYPE OF INDEX   
.	  		                     ...(I)NDEX OR (A)IMDEX
		                   MEME_FV:  ...FILE KEY VARLISTS
		                   MEME_FK:  ...FILE KEY SIZES  
		                   MEME_LIST:...FILE RECORD (FIELD LIST)
		                   MEME_REC: ...FILE RECORD (PACKED)
		                   MEME_OLD: ...FILE SAVED WHEN READ
		                   MEME_QTY: ...NUMBER OF FILES 
			           1	     ...FILE NUMBER FOR THIS READ
              IF ((MEM_ID1 <> MEME_ID1) OR (RESULT <> 1))
                IF (SQUEEZE SAVE_DEPC = "")
                  BREAK
                ENDIF
                CALL GET_FAM
                SWITCH SAVE_DEPC
                  CASE "EC"
                       IF (CLD_SW <> "*")
                         PACKLEN DEP_TERM_SAV WITH DEP_TERM_LIST
                         CALL WRITE_FLEX_LTR
                         UNPACK DEP_TERM_SAV INTO DEP_TERM_LIST
                         IF ((SQUEEZE W_MEME_SAV1 = "") AND:
                            (SQUEEZE W_MEME_SAV2 = "") AND:
                            (SQUEEZE W_MEME_SAV3 = "") AND:
                            (SQUEEZE W_MEME_SAV4 = "") AND:
                            (SQUEEZE W_MEME_SAV5 = ""))
                             UNPACK MEME_SAV INTO MEME_LIST
                             IF (SQUEEZE MEME_TRM <> "")
                                MOVE MEME_TRM TO O_TRM
                             ENDIF
                             MOVE DEP_TERM_DTE TO MEME_TRM
                             PACK MEME_SAV WITH MEME_LIST 
                             CALL WRITE_MEMMEM
                             IF (SQUEEZE MEME_LEV2 = "95")
                                IF (SQUEEZE MEME_SAV2 <> "")
                                  UNPACK MEME_SAV2 INTO MEME_LIST
                                  IF (SQUEEZE MEME_TRM <> "")
                                    MOVE MEME_TRM TO O_TRM
                                  ENDIF
                                  MOVE DEP_TERM_DTE TO MEME_TRM
                                  PACK MEME_SAV WITH MEME_LIST 
                                  CALL WRITE_MEMMEM
                                ENDIF
                             ENDIF  
                             UNPACK MEME_SAV3 INTO MEME_LIST
                             MOVE WRK_DATE TO MEME_EFF
                             IF (SQUEEZE O_TRM <> "")
                                MOVE O_TRM TO MEME_TRM
                             ELSE
                                MOVE BLANKS TO MEME_TRM
                             ENDIF
                             MOVE "EE" TO MEME_DEPC
                             PACK MEME_SAV WITH MEME_LIST 
                             CALL WRITE_MEMMEM
                             IF (SQUEEZE MEME_LEV2 = "95")
                                IF (SQUEEZE MEME_SAV2 <> "")
                                  UNPACK MEME_SAV2 INTO MEME_LIST
                                  MOVE WRK_DATE TO MEME_EFF
                                  IF (SQUEEZE O_TRM <> "")
                                     MOVE O_TRM TO MEME_TRM
                                  ELSE
                                     MOVE BLANKS TO MEME_TRM
                                  ENDIF
                                  MOVE "EE" TO MEME_DEPC
                                  PACK MEME_SAV WITH MEME_LIST 
                                  CALL WRITE_MEMMEM
                                ENDIF
                             ENDIF
                             ADD 1 TO X_CNT2
                             UNPACK X_CNT2 INTO CNT1_4,CNT1_3
                             CALL X_DISPLAY_COUNTS
                         ELSE
                            IF (SQUEEZE W_MEME_SAV1 <> "")
                              UNPACK W_MEME_SAV1 INTO MEME_LIST
                              IF (MEME_DEPC = "EE")
                                 CALL FIX_FUTURE
                              ELSE
                                 MOVE "EE" TO MEME_DEPC
                                 PACK MEME_SAV WITH MEME_LIST
                                 CALL WRITE_MEMMEM
                                 CALL FIX_FUTURE
                              ENDIF
                            ELSE
                              UNPACK MEME_SAV INTO MEME_LIST
                              MOVE DEP_TERM_DTE TO MEME_TRM
                              PACK MEME_SAV WITH MEME_LIST
                              CALL WRITE_MEMMEM
                              CALL DATE_CALC USING E_EFF,"SUB","DAYS",1,WRK_DATE_2
                              UNPACK MEME_SAV INTO MEME_LIST
                              MOVE WRK_DATE TO MEME_EFF
                              MOVE WRK_DATE_2 TO MEME_TRM
                              MOVE "EE" TO MEME_DEPC
                              PACK MEME_SAV WITH MEME_LIST
                              CALL WRITE_MEMMEM
                              CALL FIX_FUTURE
                            ENDIF
                         ENDIF
                       ENDIF
                  CASE "FM"
                       IF (CLD_SW <> "*")
                         PACKLEN DEP_TERM_SAV WITH DEP_TERM_LIST
                         CALL WRITE_FLEX_LTR
                         UNPACK DEP_TERM_SAV INTO DEP_TERM_LIST
                         IF ((SQUEEZE W_MEME_SAV1 = "") AND:
                            (SQUEEZE W_MEME_SAV2 = "") AND:
                            (SQUEEZE W_MEME_SAV3 = "") AND:
                            (SQUEEZE W_MEME_SAV4 = "") AND:
                            (SQUEEZE W_MEME_SAV5 = ""))
                             UNPACK MEME_SAV INTO MEME_LIST
                             IF (SQUEEZE MEME_TRM <> "")
                                MOVE MEME_TRM TO O_TRM
                             ENDIF
                             MOVE DEP_TERM_DTE TO MEME_TRM
                             PACK MEME_SAV WITH MEME_LIST 
                             CALL WRITE_MEMMEM
                             IF (SQUEEZE MEME_LEV2 = "95")
                                IF (SQUEEZE MEME_SAV2 <> "")
                                  UNPACK MEME_SAV2 INTO MEME_LIST
                                  IF (SQUEEZE MEME_TRM <> "")
                                    MOVE MEME_TRM TO O_TRM
                                  ENDIF
                                  MOVE DEP_TERM_DTE TO MEME_TRM
                                  PACK MEME_SAV WITH MEME_LIST 
                                  CALL WRITE_MEMMEM
                                ENDIF
                             ENDIF  
                             UNPACK MEME_SAV3 INTO MEME_LIST
                             MOVE WRK_DATE TO MEME_EFF
                             IF (SQUEEZE O_TRM <> "")
                                MOVE O_TRM TO MEME_TRM
                             ELSE
                                MOVE BLANKS TO MEME_TRM
                             ENDIF
                             MOVE "ES" TO MEME_DEPC
                             PACK MEME_SAV WITH MEME_LIST 
                             CALL WRITE_MEMMEM
                             IF (SQUEEZE MEME_LEV2 = "95")
                                IF (SQUEEZE MEME_SAV2 <> "")
                                  UNPACK MEME_SAV2 INTO MEME_LIST
                                  MOVE WRK_DATE TO MEME_EFF
                                  IF (SQUEEZE O_TRM <> "")
                                     MOVE O_TRM TO MEME_TRM
                                  ELSE
                                     MOVE BLANKS TO MEME_TRM
                                  ENDIF
                                  MOVE "ES" TO MEME_DEPC
                                  PACK MEME_SAV WITH MEME_LIST 
                                  CALL WRITE_MEMMEM
                                ENDIF
                             ENDIF
                             ADD 1 TO X_CNT2
                             UNPACK X_CNT2 INTO CNT1_4,CNT1_3
                             CALL X_DISPLAY_COUNTS
                         ELSE
                            IF (SQUEEZE W_MEME_SAV1 <> "")
                              UNPACK W_MEME_SAV1 INTO MEME_LIST
                              IF (MEME_DEPC = "ES")
                                 CALL FIX_FUTURE
                              ELSE
                                 MOVE "ES" TO MEME_DEPC
                                 PACK MEME_SAV WITH MEME_LIST
                                 CALL WRITE_MEMMEM
                                 CALL FIX_FUTURE
                              ENDIF
                            ELSE
                              UNPACK MEME_SAV INTO MEME_LIST
                              MOVE DEP_TERM_DTE TO MEME_TRM
                              PACK MEME_SAV WITH MEME_LIST
                              CALL WRITE_MEMMEM
                              CALL DATE_CALC USING E_EFF,"SUB","DAYS",1,WRK_DATE_2
                              UNPACK MEME_SAV INTO MEME_LIST
                              MOVE WRK_DATE TO MEME_EFF
                              MOVE WRK_DATE_2 TO MEME_TRM
                              MOVE "ES" TO MEME_DEPC
                              PACK MEME_SAV WITH MEME_LIST
                              CALL WRITE_MEMMEM
                              CALL FIX_FUTURE
                            ENDIF
                         ENDIF
                       ENDIF
                ENDSWITCH       
                BREAK
              ENDIF
              IF (SQUEEZE MEME_NET = "LIFE")
                 CONTINUE
              ENDIF
              IF ((SQUEEZE MEME_TRM <> "") AND (MEME_TRM < MEME_EFF))
                CONTINUE
              ENDIF
              IF (SQUEEZE MEME_TRM = "")
                 MOVE "99999999" TO MEME_TRM
              ENDIF
              IF ((WRK_DATE >= MEME_EFF) AND (WRK_DATE < MEME_TRM))
                MOVE MEME_DEPC TO SAVE_DEPC
                IF (SQUEEZE MEME_SAV = "")
                   PACK MEME_SAV WITH MEME_LIST 
                   PACK MEME_SAV3 WITH MEME_LIST
                ELSE
                   IF (SQUEEZE MEME_LEV2 = "95")
                      PACK MEME_SAV2 WITH MEME_LIST 
                   ENDIF
                ENDIF
              ENDIF
              IF (MEME_EFF >= WRK_DATE)
                  IF (MEME_EFF = WRK_DATE)
                    IF (SQUEEZE E_EFF = "")
                      MOVE MEME_EFF TO E_EFF
                    ELSE
                      IF (MEME_EFF < E_EFF)
                        MOVE MEME_EFF TO E_EFF
                      ENDIF
                    ENDIF
                    PACK W_MEME_SAV1 WITH MEME_LIST
                  ELSE
                     IF (SQUEEZE W_MEME_SAV2 = "")
                        IF (SQUEEZE E_EFF = "")
                           MOVE MEME_EFF TO E_EFF
                        ELSE
                           IF (MEME_EFF < E_EFF)
                              MOVE MEME_EFF TO E_EFF
                           ENDIF
                        ENDIF
                        PACK W_MEME_SAV2 WITH MEME_LIST
                     ELSE
                       IF (SQUEEZE W_MEME_SAV3 = "")
                         IF (SQUEEZE E_EFF = "")
                            MOVE MEME_EFF TO E_EFF
                         ELSE
                            IF (MEME_EFF < E_EFF)
                              MOVE MEME_EFF TO E_EFF
                            ENDIF
                         ENDIF
                         PACK W_MEME_SAV3 WITH MEME_LIST
                       ELSE 
                         IF (SQUEEZE W_MEME_SAV4 = "")
                           IF (SQUEEZE E_EFF = "")
                              MOVE MEME_EFF TO E_EFF 
                           ELSE
                              IF (MEME_EFF < E_EFF)
                                 MOVE MEME_EFF TO E_EFF
                              ENDIF
                           ENDIF  
                           PACK W_MEME_SAV4 WITH MEME_LIST
                         ELSE
                           IF (SQUEEZE W_MEME_SAV5 = "")
                             IF (SQUEEZE E_EFF = "")
                                MOVE MEME_EFF TO E_EFF 
                             ELSE
                                IF (MEME_EFF < E_EFF)
                                   MOVE MEME_EFF TO E_EFF
                                ENDIF
                             ENDIF  
                             PACK W_MEME_SAV5 WITH MEME_LIST
                           ENDIF                        
                         ENDIF 
                       ENDIF
                     ENDIF
                  ENDIF
              ENDIF
         REPEAT
 REPEAT
 RETURN

WRITE_FLEX_LTR
  MOVE "Y" TO FIRST_READ
  PACKLEN DEP_TERM_WRK_KEY WITH DEP_TERM_ESSN
  LOOP
    IF (FIRST_READ = "Y")
      CALL READ_OGBFILE_IX USING DEP_TERM_WRK_FD_I,DEP_TERM_WRK_NAME_I: 
                                 DEP_TERM_WRK_KEY,DEP_TERM_LIST
      MOVE "N" TO FIRST_READ
    ELSE
      CALL READKS_OGBFILE_IX USING DEP_TERM_WRK_FD_I,DEP_TERM_WRK_NAME_I: 
                                   DEP_TERM_LIST
    ENDIF
    IF (RESULT <> 1)
       BREAK
    ENDIF
    IF (DEP_TERM_ESSN <> DEP_TERM_WRK_KEY)
       BREAK
    ENDIF
    UNPACK MEME_SAV INTO MEME_LIST
    UNPACK MEME_LEV1 INTO W_DIM1
    IF (W_DIM1 = "R")
        PACK W_AGY WITH MEME_LEV2
    ELSE
        PACK W_AGY WITH MEME_LEV1
    ENDIF
    MOVE MEME_ID1 TO FLEX_LTR_MID1
    MOVE MEME_CLIR TO FLEX_LTR_CID1
    MOVE DEP_TERM_ID1 TO FLEX_LTR_DID1
    MOVE OGB_SEQ1 TO OGB_SEQ
    CALL WRITE_OGBREC USING FLEX_LTR_FD,FLEX_LTR_NAME,FLEX_LTR_LIST
    CLEAR FLEX_LTR_LIST
  REPEAT
  RETURN

FIX_FUTURE
  IF (SQUEEZE W_MEME_SAV2 <> "")
     UNPACK W_MEME_SAV2 INTO MEME_LIST
     MOVE MEME_EFF TO WRK_DATE
     CALL FIG_FUT_COVL
     UNPACK W_MEME_SAV2 INTO MEME_LIST
     IF (FUT_COVL <> MEME_DEPC)
       MOVE FUT_COVL TO MEME_DEPC
       PACK MEME_SAV WITH MEME_LIST
       CALL WRITE_MEMMEM
     ENDIF
  ENDIF
  IF (SQUEEZE W_MEME_SAV3 <> "")
     UNPACK W_MEME_SAV3 INTO MEME_LIST
     MOVE MEME_EFF TO WRK_DATE
     CALL FIG_FUT_COVL
     UNPACK W_MEME_SAV3 INTO MEME_LIST
     IF (FUT_COVL <> MEME_DEPC)
       MOVE FUT_COVL TO MEME_DEPC
       PACK MEME_SAV WITH MEME_LIST
       CALL WRITE_MEMMEM
     ENDIF
  ENDIF
  IF (SQUEEZE W_MEME_SAV4 <> "")
     UNPACK W_MEME_SAV4 INTO MEME_LIST
     MOVE MEME_EFF TO WRK_DATE
     CALL FIG_FUT_COVL
     UNPACK W_MEME_SAV4 INTO MEME_LIST
     IF (FUT_COVL <> MEME_DEPC)
       MOVE FUT_COVL TO MEME_DEPC
       PACK MEME_SAV WITH MEME_LIST
       CALL WRITE_MEMMEM
     ENDIF
  ENDIF
  IF (SQUEEZE W_MEME_SAV5 <> "")
     UNPACK W_MEME_SAV5 INTO MEME_LIST
     MOVE MEME_EFF TO WRK_DATE
     CALL FIG_FUT_COVL
     UNPACK W_MEME_SAV5 INTO MEME_LIST
     IF (FUT_COVL <> MEME_DEPC)
       MOVE FUT_COVL TO MEME_DEPC
       PACK MEME_SAV WITH MEME_LIST
       CALL WRITE_MEMMEM
     ENDIF
  ENDIF
  RETURN

GET_FAM
  CLEAR CLD_SW
  MOVE "Y" TO FIRST_READ
  LOOP
     IF (FIRST_READ = "Y")
       CLEAR MEM_AIM
       PACK  MEM_AIM1 WITH "01X",MEM_ESSN,BLANKS
       CALL  FILE_READ USING MEM_FD:        ...FILE DECLARATION LIST
                             MEM_FN:        ...FILE NAME LIST
                             MEM_FC:        ...(I)NDEX OR (A)IMDEX
                             MEM_FV:        ...FILE KEY VARLISTS
                             MEM_AIM:       ...FILE KEY SIZES
                             MEM_LIST:      ...FILE RECORD (FIELD LIST)
                             MEM_REC:       ...FILE RECORD (PACKED)
                             MEM_OLD:       ...FILE SAVED WHEN READ
                             MEM_QTY:       ...NUMBER OF FILES
                             2              ...FILE NUMBER FOR THIS READ
       MOVE "N" TO FIRST_READ
     ELSE                        
       CALL  FILE_NEXT USING MEM_FD:        ...FILE DECLARATION LIST
                             MEM_FN:        ...FILE NAME LIST
                             MEM_FC:        ...(I)NDEX OR (A)IMDEX
                             MEM_FV:        ...FILE KEY VARLISTS
                             MEM_AIM:       ...FILE KEY SIZES
                             MEM_LIST:      ...FILE RECORD (FIELD LIST)
                             MEM_REC:       ...FILE RECORD (PACKED)
                             MEM_OLD:       ...FILE SAVED WHEN READ
                             MEM_QTY:       ...NUMBER OF FILES
                             2              ...FILE NUMBER FOR THIS READ
     ENDIF
     IF (RESULT <> 1)
        BREAK
     ENDIF
     SWITCH MEM_REL
       CASE "01" OR "02" 
        CONTINUE
     ENDSWITCH
     PACK MEME_FK11 WITH MEM_ID1,BLANKS
     CALL  FILE_READ USING MEME_FD:  ...FILE DECLARATION LIST
        	           MEME_FN:  ...FILE NAME LIST  
		           MEME_FC:  ...TYPE OF INDEX   
.	  		             ...(I)NDEX OR (A)IMDEX
		           MEME_FV:  ...FILE KEY VARLISTS
		           MEME_FK:  ...FILE KEY SIZES  
		           MEME_LIST:...FILE RECORD (FIELD LIST)
		           MEME_REC: ...FILE RECORD (PACKED)
		           MEME_OLD: ...FILE SAVED WHEN READ
		           MEME_QTY: ...NUMBER OF FILES 
			   1	     ...FILE NUMBER FOR THIS READ
         LOOP
             CALL  FILE_NEXT USING MEME_FD:  ...FILE DECLARATION LIST
  	          	           MEME_FN:  ...FILE NAME LIST  
		                   MEME_FC:  ...TYPE OF INDEX   
.	  		                     ...(I)NDEX OR (A)IMDEX
		                   MEME_FV:  ...FILE KEY VARLISTS
		                   MEME_FK:  ...FILE KEY SIZES  
		                   MEME_LIST:...FILE RECORD (FIELD LIST)
		                   MEME_REC: ...FILE RECORD (PACKED)
		                   MEME_OLD: ...FILE SAVED WHEN READ
		                   MEME_QTY: ...NUMBER OF FILES 
			           1	     ...FILE NUMBER FOR THIS READ
              IF ((MEM_ID1 <> MEME_ID1) OR (RESULT <> 1))
                BREAK       
              ENDIF
              IF (SQUEEZE MEME_NET = "LIFE")
                 CONTINUE
              ENDIF
              IF ((SQUEEZE MEME_LEV2 = "95") AND (SQUEEZE MEME_MODE = ""))
                  CONTINUE
              ENDIF
              IF ((SQUEEZE MEME_TRM <> "") AND (MEME_TRM < MEME_EFF))
                CONTINUE
              ENDIF
              IF (SQUEEZE MEME_TRM = "")
                 MOVE "99999999" TO MEME_TRM
              ENDIF
              IF ((WRK_DATE >= MEME_EFF) AND (WRK_DATE < MEME_TRM))
                  MOVE "*" TO CLD_SW
              ENDIF
         REPEAT
  REPEAT
  RETURN    

FIG_FUT_COVL
  MOVE "Y" TO FIRST_READ
  CLEAR CLD_SW
  CLEAR SP_SW
  CLEAR FUT_COVL
  LOOP
     IF (FIRST_READ = "Y")
       CLEAR MEM_AIM
       PACK  MEM_AIM1 WITH "01X",MEM_ESSN,BLANKS
       CALL  FILE_READ USING MEM_FD:        ...FILE DECLARATION LIST
                             MEM_FN:        ...FILE NAME LIST
                             MEM_FC:        ...(I)NDEX OR (A)IMDEX
                             MEM_FV:        ...FILE KEY VARLISTS
                             MEM_AIM:       ...FILE KEY SIZES
                             MEM_LIST:      ...FILE RECORD (FIELD LIST)
                             MEM_REC:       ...FILE RECORD (PACKED)
                             MEM_OLD:       ...FILE SAVED WHEN READ
                             MEM_QTY:       ...NUMBER OF FILES
                             2              ...FILE NUMBER FOR THIS READ
       MOVE "N" TO FIRST_READ
     ELSE                        
       CALL  FILE_NEXT USING MEM_FD:        ...FILE DECLARATION LIST
                             MEM_FN:        ...FILE NAME LIST
                             MEM_FC:        ...(I)NDEX OR (A)IMDEX
                             MEM_FV:        ...FILE KEY VARLISTS
                             MEM_AIM:       ...FILE KEY SIZES
                             MEM_LIST:      ...FILE RECORD (FIELD LIST)
                             MEM_REC:       ...FILE RECORD (PACKED)
                             MEM_OLD:       ...FILE SAVED WHEN READ
                             MEM_QTY:       ...NUMBER OF FILES
                             2              ...FILE NUMBER FOR THIS READ
     ENDIF
     IF (RESULT <> 1)
        BREAK
     ENDIF
     IF (MEM_REL = "01")
        CONTINUE
     ENDIF
     PACK MEME_FK11 WITH MEM_ID1,BLANKS
     CALL  FILE_READ USING MEME_FD:  ...FILE DECLARATION LIST
        	           MEME_FN:  ...FILE NAME LIST  
		           MEME_FC:  ...TYPE OF INDEX   
.	  		             ...(I)NDEX OR (A)IMDEX
		           MEME_FV:  ...FILE KEY VARLISTS
		           MEME_FK:  ...FILE KEY SIZES  
		           MEME_LIST:...FILE RECORD (FIELD LIST)
		           MEME_REC: ...FILE RECORD (PACKED)
		           MEME_OLD: ...FILE SAVED WHEN READ
		           MEME_QTY: ...NUMBER OF FILES 
			   1	     ...FILE NUMBER FOR THIS READ
         LOOP
             CALL  FILE_NEXT USING MEME_FD:  ...FILE DECLARATION LIST
  	          	           MEME_FN:  ...FILE NAME LIST  
		                   MEME_FC:  ...TYPE OF INDEX   
.	  		                     ...(I)NDEX OR (A)IMDEX
		                   MEME_FV:  ...FILE KEY VARLISTS
		                   MEME_FK:  ...FILE KEY SIZES  
		                   MEME_LIST:...FILE RECORD (FIELD LIST)
		                   MEME_REC: ...FILE RECORD (PACKED)
		                   MEME_OLD: ...FILE SAVED WHEN READ
		                   MEME_QTY: ...NUMBER OF FILES 
			           1	     ...FILE NUMBER FOR THIS READ
              IF ((MEM_ID1 <> MEME_ID1) OR (RESULT <> 1))
                BREAK       
              ENDIF
              IF (SQUEEZE MEME_NET = "LIFE")
                 CONTINUE
              ENDIF
              IF ((SQUEEZE MEME_LEV2 = "95") AND (SQUEEZE MEME_MODE = ""))
                  CONTINUE
              ENDIF
              IF ((SQUEEZE MEME_TRM <> "") AND (MEME_TRM < MEME_EFF))
                CONTINUE
              ENDIF
              IF (SQUEEZE MEME_TRM = "")
                 MOVE "99999999" TO MEME_TRM
              ENDIF
              IF ((WRK_DATE  >= MEME_EFF) AND (WRK_DATE < MEME_TRM))
                IF (MEM_REL = "02")
                  MOVE "*" TO SP_SW
                ELSE
                  MOVE "*" TO CLD_SW
                ENDIF
              ENDIF
         REPEAT
  REPEAT
  IF ((SP_SW = "*") AND (CLD_SW = "*"))
     MOVE "FM" TO FUT_COVL
  ELSE
     IF ((SQUEEZE SP_SW = "") AND (SQUEEZE CLD_SW = ""))
          MOVE "EE" TO FUT_COVL
     ELSE
        IF (SP_SW = "*")
           MOVE "ES" TO FUT_COVL
        ELSE
           MOVE "EC" TO FUT_COVL
        ENDIF
     ENDIF
  ENDIF
  RETURN    

. ----------------------------
. Operator pressed F9
. ----------------------------

QUIT
         IF (C_RMODE = "I")
            error     horz="23",vert="19":
                      bgcol=C_ERRB,fgcol=C_ERRF:
                      lncol=C_ERRL,shade="Y":
                      text=" Process Aborted by Operator ":
                      text="-----------------------------"
            messageerase
         ENDIF

         CLEAR     C_NOHIST

         TRAPREST  TRAP_DATA

         IF (RUN_MODE = "B")
            LOOP
               RETCOUNT  CURR_RETURN
               WHILE     (CURR_RETURN > ORIG_RETURN)
               NORETURN
            REPEAT
            MOVE      SCH_RTABRT  TO  SCH@RTCODE
            RETURN
         ENDIF
         CHAIN     "MENU"

INITIALIZE
         DISPLAY *P1:9,*ES
         CALL X_BLANK_SCREEN
         CLOCK     TIMESTAMP   INTO  TIMESTAMP
         CLOCK     TIMESTAMP   INTO  CURRDATE
         CLOCK     TIMESTAMP     TO  TODAY
. ...Display Counters
	 MOVE      "Input Recs Read:    " TO X_CNTDESC1
	 MOVE      "Recs Written  :    " TO X_CNTDESC2
	 CALL      X_DISPLAY_COUNTS 
         CALL    DATE_CALC USING TODAY,"ADD","MONTHS",1,NEW_DATE
         UNPACK NEW_DATE INTO WRK_YYYY                 
         RETURN
.
OPEN_FILES
         CALL      OPEN_OGBFILE_IX USING DEP_TERM_WRK_FD_I,DEP_TERM_WRK_NAME_I
         CALL      OPEN_OGBFILE USING DEP_TERM_FD,DEP_TERM_NAME
         CALL      PREP_OGBFILE USING U_COVL_FD,U_COVL_NAME
         CALL      PREP_OGBFILE USING FLEX_LTR_FD,FLEX_LTR_NAME
         RETURN

CLOSE_FILES
         CALL      CLOSE_OGBFILE USING DEP_TERM_FD,DEP_TERM_NAME
         CALL      CLOSE_OGBFILE USING U_COVL_FD,U_COVL_NAME
         CALL      CLOSE_OGBFILE USING FLEX_LTR_FD,FLEX_LTR_NAME
         RETURN

WRITE_MEMMEM
  UNPACK MEME_SAV INTO MEME_LIST
  IF (MEME_TRM = "99999999")
     MOVE BLANKS TO MEME_TRM
  ENDIF
  UNPACK MEM_SAV INTO MEM_LIST
  PACK INM_REC WITH MEM_LIST,MEME_LIST
  UNPACK INM_REC INTO INM_LIST
  MOVE "Z" TO INME_ERSA
  CLEAR INME_NEWBY
  CLEAR INME_CHGBY
  IF ((SQUEEZE INME_NET = "HUMAN") AND (SQUEEZE INME_PRD = "ASO"))
     IF (INME_EFF >= "20060701")
         MOVE "STAT" TO INME_PLAN
     ENDIF
  ENDIF
  IF ((SQUEEZE O_TRM <> "") OR (SQUEEZE INME_TRM = ""))
     CLEAR INME_ID1
     CLEAR INME_ID2
  ENDIF
  MOVE OGB_SEQ1 TO OGB_SEQ
  CALL WRITE_OGBREC USING U_COVL_FD,U_COVL_NAME:
                          INM_LIST
  CLEAR INM_LIST
  RETURN

REFORMAT_FILES
   DISPLAY   *P1:21,*EL,*BOLDON, *BGCOLOR=*BLACK, *FGCOLOR=*WHITE:
             *P30:21, "REFORMATTING", *BOLDOFF
   CALL COPY_OGBFILE USING DEP_TERM_NAME,DEP_TERM_WRK_NAME
            IF OVER
              ERROR     HORZ="15",VERT="19":
                        BGCOL=C_ERRB,FGCOL=C_ERRF:
                        LNCOL=C_ERRL,SHADE="Y":
                        TEXT="COPY TO WRK FAILED"
              CHAIN     "MENU"
            ENDIF
   CALL INDEX_OGBFILE USING DEP_TERM_WRK_NAME,DEP_TERM_WRK_NAME_I,DEP_TERM_WRK_IDX
              IF OVER
                 ERROR     HORZ="15",VERT="19":
                           BGCOL=C_ERRB,FGCOL=C_ERRF:
                           LNCOL=C_ERRL,SHADE="Y":
                           TEXT="INDEX OF WRK FAILED"
                 CHAIN     "MENU"
              ENDIF
   SORT     "/w/a1101041.txt /w/a1101041.txt 9-17 22-29d -t"
    IF OVER
        ERROR     HORZ="22",VERT="20":
                  BGCOL=C_ERRB,FGCOL=C_ERRF:
                  LNCOL=C_ERRL,SHADE="Y":
                  TEXT="SORT-1 FAILED"
        CHAIN     "MENU"
    ENDIF
   SORT     "/w/a1101041.txt /w/a1101041.txt 9-17 -u -t"
    IF OVER
        ERROR     HORZ="22",VERT="20":
                  BGCOL=C_ERRB,FGCOL=C_ERRF:
                  LNCOL=C_ERRL,SHADE="Y":
                  TEXT="SORT-2 FAILED"
        CHAIN     "MENU"
    ENDIF
   RETURN
.
. ----------------------------
. Update Valid Table with run date
. ----------------------------

. ----------------------------
. Program Specific Includes
. ----------------------------

    INC       UTIL.SR      
    INC       VALID.IO
    INC       X_STANDARD.SR
    INC       FILE.IO
    INC       X_OGBFILE.IO

. +++++++++++++++++++++++++++++++++++++
. /End of ELG0375.PS
. +++++++++++++++++++++++++++++++++++++
